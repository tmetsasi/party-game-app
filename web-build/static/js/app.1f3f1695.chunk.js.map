{"version":3,"sources":["styles/AppStyles.js","components/InlineTextButton.js","firebase.js","screens/Login.js","screens/SignUp.js","screens/ResetPassword.js","components/AddToDoModal.js","screens/ToDo.js","screens/ManageAccount.js","App.js","assets/background.jpg"],"names":["StyleSheet","create","imageContainer","flex","backgroundColor","alignItems","justifyContent","container","padding","noPadding","rowContainer","flexDirection","alignSelf","marginVertical","fillSpace","rightAligned","topMargin","marginTop","bottomMargin","marginBottom","rightMargin","marginRight","leftMargin","marginLeft","backgroundCover","opacity","lightText","color","errorText","header","fontSize","textInput","borderBottomWidth","lightTextInput","borderBottomColor","darkTextInput","inlineTextButton","pressedInlineTextButton","InlineTextButton","props","style","Pressable","onPress","pressed","Text","AppStyles","text","auth","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getAuth","db","getFirestore","Login","navigation","background","require","currentUser","navigate","onAuthStateChanged","user","React","useState","errorMessage","setErrorMessage","email","setEmail","password","setPassword","ImageBackground","source","KeyboardAvoidingView","behavior","Platform","OS","keyboardVerticalOffset","TextInput","placeholder","placeholderTextColor","value","onChangeText","secureTextEntry","View","Button","title","signInWithEmailAndPassword","then","userCredential","catch","error","message","SignUp","confirmPassword","setConfirmPassword","validationMessage","setValidationMessage","validateAndSet","valueToCompare","setValue","popToTop","createUserWithEmailAndPassword","sendEmailVerification","ResetPassword","sendPasswordResetEmail","AddToDoModal","todo","setTodo","onClose","addToDo","ToDo","modalVisible","setModalVisible","isLoading","setIsLoading","isRefreshing","setIsRefreshing","toDos","setToDos","loadToDoList","q","query","collection","where","uid","querySnapshot","getDocs","forEach","doc","toDo","data","id","push","deleteToDo","toDoId","deleteDoc","updatedToDos","filter","item","renderToDoItem","BouncyCheckbox","isChecked","complated","size","fillColor","unfillColor","iconStyle","borderColor","toDoRef","setDoc","completed","merge","checkToDoItem","toDoToSave","userId","docRef","addDoc","SafeAreaView","Modal","animationType","transparent","visible","onRequestClose","emailVerified","ActivityIndicator","FlatList","refreshing","onRefresh","renderItem","keyExtractor","ManageAccount","newPassword","setNewPassword","currentPassword","setCurrentPassword","updatePassword","batch","writeBatch","delete","ref","commit","deleteUser","signOut","pop","Stack","createNativeStackNavigator","App","NavigationContainer","Navigator","Screen","name","component","options","headerShown","module","exports"],"mappings":"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","file":"static/js/app.1f3f1695.chunk.js","sourcesContent":["import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  imageContainer: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 16\n  },\n  noPadding: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: \"red\"\n  },\n  rowContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    alignSelf: \"stretch\",\n    marginVertical: 4,\n  },\n  fillSpace: {\n    flex: 1\n  },\n  rightAligned: {\n    justifyContent: \"flex-end\"\n  },\n  topMargin: {\n    marginTop: 16\n  },\n  bottomMargin: {\n    marginBottom: 16\n  },\n  rightMargin: {\n    marginRight: 16\n  },\n  leftMargin: {\n    marginLeft: 16\n  },\n  backgroundCover: {\n    alignSelf: 'stretch',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#000000',\n    opacity: 0.7,\n    padding: 16\n  },\n  lightText: {\n    color: \"#fff\"\n  },\n  errorText: {\n    color: \"#ff0000\"\n  },\n  header: {\n    fontSize: 20,\n    alignSelf: \"center\"\n  },\n  textInput: {\n    alignSelf: 'stretch',\n    padding: 8,\n    borderBottomWidth: 2,\n    marginVertical: 8\n  },\n  lightTextInput: {\n    borderBottomColor: \"#ffffff\"\n  },\n  darkTextInput: {\n    borderBottomColor: \"#000000\"\n  },\n  inlineTextButton: {\n    color: \"#87F1FF\"\n  },\n  pressedInlineTextButton: {\n    color: \"#87F1FF\",\n    opacity: 0.6\n  }\n});","import { Text, Pressable } from 'react-native';\nimport AppStyles from '../styles/AppStyles';\n\nexport default function InlineTextButton(props) {\n  let style = {};\n  if (props.color) {\n    style.color = props.color\n  };\n  return (\n    <Pressable onPress={props.onPress}>\n      {({ pressed }) => (\n        <Text \n          style={[pressed ? AppStyles.pressedInlineTextButton : AppStyles.inlineTextButton, style]}>\n            {props.text}\n        </Text>\n      )}\n    </Pressable>\n  )\n}","import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\"\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBfldfjNJNmhMJBg7jrvTpknatYkJJakf4\",\n  authDomain: \"party-game-app-f1835.firebaseapp.com\",\n  projectId: \"party-game-app-f1835\",\n  storageBucket: \"party-game-app-f1835.appspot.com\",\n  messagingSenderId: \"363758306995\",\n  appId: \"1:363758306995:web:d4f744cd583879221292c6\",\n  measurementId: \"G-CD2Z3B9MQ3\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth();\nconst db = getFirestore();\n\nexport {\n  auth,\n  db\n}","import { Text, View, TextInput, ImageBackground, Button, KeyboardAvoidingView, Platform } from 'react-native';\nimport AppStyles from '../styles/AppStyles';\nimport InlineTextButton from '../components/InlineTextButton';\nimport React from 'react';\nimport { auth } from \"../firebase\";\nimport { signInWithEmailAndPassword, onAuthStateChanged } from \"firebase/auth\";\n\nexport default function Login({ navigation }) {\n  const background = require(\"../assets/background.jpg\");\n\n  if (auth.currentUser) {\n    navigation.navigate(\"ToDo\");\n  } else {\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        navigation.navigate(\"ToDo\");\n      }\n    });\n  }\n\n  let [errorMessage, setErrorMessage] = React.useState(\"\");\n  let [email, setEmail] = React.useState(\"\");\n  let [password, setPassword] = React.useState(\"\");\n\n  let login = () => {\n    if (email !== \"\" && password !== \"\") {\n      signInWithEmailAndPassword(auth, email, password)\n        .then((userCredential) => {\n          navigation.navigate(\"ToDo\", { user: userCredential.user });\n          setErrorMessage(\"\");\n          setEmail(\"\");\n          setPassword(\"\");\n        })\n        .catch((error) => {\n          setErrorMessage(error.message)\n        });\n    } else {\n      setErrorMessage(\"Please enter an email and password\");\n    }\n  }\n\n  return (\n    <ImageBackground style={AppStyles.imageContainer} source={background}>\n      <KeyboardAvoidingView \n        style={AppStyles.backgroundCover} \n        behavior={Platform.OS === \"ios\" ? \"padding\" : null}\n        keyboardVerticalOffset={60}>\n        <Text style={[AppStyles.lightText, AppStyles.header]}>Login</Text>\n        <Text style={AppStyles.errorText}>{errorMessage}</Text>\n        <TextInput \n          style={[AppStyles.textInput, AppStyles.lightTextInput, AppStyles.lightText]} \n          placeholder='Email' \n          placeholderTextColor=\"#BEBEBE\"\n          value={email}\n          onChangeText={setEmail} />\n        <TextInput \n          style={[AppStyles.textInput, AppStyles.lightTextInput, AppStyles.lightText]} \n          placeholder='Password' \n          placeholderTextColor=\"#BEBEBE\" \n          secureTextEntry={true} \n          value={password} \n          onChangeText={setPassword} />\n        <View style={[AppStyles.rowContainer, AppStyles.topMargin]}>\n          <Text style={AppStyles.lightText}>Don't have an account? </Text>\n          <InlineTextButton text=\"Sign Up\" onPress={() => navigation.navigate(\"SignUp\")} />\n        </View>\n        <View style={[AppStyles.rowContainer, AppStyles.bottomMargin]}>\n          <Text style={AppStyles.lightText}>Forgotten your password? </Text>\n          <InlineTextButton text=\"Reset\" onPress={() => navigation.navigate(\"ResetPassword\")} />\n        </View>\n        <Button title=\"Login\" onPress={login} color=\"#f7b267\" />\n      </KeyboardAvoidingView>\n    </ImageBackground>\n  );\n}\n\n\n","import { Text, View, TextInput, ImageBackground, Button, KeyboardAvoidingView, Platform } from 'react-native';\nimport AppStyles from '../styles/AppStyles';\nimport InlineTextButton from '../components/InlineTextButton';\nimport React from 'react';\nimport { auth } from \"../firebase\";\nimport { createUserWithEmailAndPassword, sendEmailVerification } from \"firebase/auth\";\n\nexport default function SignUp({ navigation }) {\n  const background = require(\"../assets/background.jpg\");\n\n  let [email, setEmail] = React.useState(\"\");\n  let [password, setPassword] = React.useState(\"\");\n  let [confirmPassword, setConfirmPassword] = React.useState(\"\");\n  let [validationMessage, setValidationMessage] = React.useState(\"\");\n\n  let validateAndSet = (value, valueToCompare, setValue) => {\n    if (value !== valueToCompare) {\n      setValidationMessage(\"Passwords do not match.\");\n    } else {\n      setValidationMessage(\"\");\n    }\n\n    setValue(value);\n  };\n\n  let signUp = () => {\n    if (password === confirmPassword) {\n      createUserWithEmailAndPassword(auth, email, password)\n      .then((userCredential) => {\n        sendEmailVerification(auth.currentUser);\n        navigation.navigate(\"ToDo\", { user: userCredential.user });\n      })\n      .catch((error) => {\n        setValidationMessage(error.message);\n      });\n    }\n  }\n\n  return (\n    <ImageBackground style={AppStyles.imageContainer} source={background}>\n      <KeyboardAvoidingView \n        style={AppStyles.backgroundCover} \n        behavior={Platform.OS === \"ios\" ? \"padding\" : null}\n        keyboardVerticalOffset={60}>\n        <Text style={[AppStyles.lightText, AppStyles.header]}>Sign Up</Text>\n        <Text style={[AppStyles.errorText]}>{validationMessage}</Text>\n        <TextInput \n          style={[AppStyles.textInput, AppStyles.lightTextInput, AppStyles.lightText]} \n          placeholder='Email' \n          placeholderTextColor=\"#BEBEBE\"\n          value={email}\n          onChangeText={setEmail} />\n        <TextInput \n          style={[AppStyles.textInput, AppStyles.lightTextInput, AppStyles.lightText]} \n          placeholder='Password' \n          placeholderTextColor=\"#BEBEBE\" \n          secureTextEntry={true} \n          value={password} \n          onChangeText={(value) => validateAndSet(value, confirmPassword, setPassword)} />\n        <TextInput \n          style={[AppStyles.textInput, AppStyles.lightTextInput, AppStyles.lightText]} \n          placeholder='Confirm Password' \n          placeholderTextColor=\"#BEBEBE\" \n          secureTextEntry={true} \n          value={confirmPassword} \n          onChangeText={(value) => validateAndSet(value, password, setConfirmPassword)} />\n        <View style={[AppStyles.rowContainer, AppStyles.topMargin]}>\n          <Text style={AppStyles.lightText}>Already have an account? </Text>\n          <InlineTextButton text=\"Login\" onPress={() => navigation.popToTop()} />\n        </View>\n        <Button title=\"Sign Up\" onPress={signUp} color=\"#f7b267\" />\n      </KeyboardAvoidingView>\n    </ImageBackground>\n  );\n}\n\n\n","import { Text, View, TextInput, ImageBackground, Button, KeyboardAvoidingView, Platform } from 'react-native';\nimport AppStyles from '../styles/AppStyles';\nimport InlineTextButton from '../components/InlineTextButton';\nimport React from 'react';\nimport { auth } from \"../firebase\";\nimport { sendPasswordResetEmail } from 'firebase/auth';\n\nexport default function ResetPassword({ navigation }) {\n  const background = require(\"../assets/background.jpg\");\n\n  let [email, setEmail] = React.useState(\"\");\n  let [errorMessage, setErrorMessage] = React.useState(\"\");\n\n  let resetPassword = () => {\n    sendPasswordResetEmail(auth, email)\n      .then(() => {\n        navigation.popToTop();\n      })\n      .catch((error) => {\n        setErrorMessage(error.message);\n      });\n  }\n\n  return (\n    <ImageBackground style={AppStyles.imageContainer} source={background}>\n      <KeyboardAvoidingView \n        style={AppStyles.backgroundCover} \n        behavior={Platform.OS === \"ios\" ? \"padding\" : null}\n        keyboardVerticalOffset={60}>\n        <Text style={[AppStyles.lightText, AppStyles.header]}>Reset Password</Text>\n        <Text style={AppStyles.errorText}>{errorMessage}</Text>\n        <TextInput \n          style={[AppStyles.textInput, AppStyles.lightTextInput, AppStyles.lightText]} \n          placeholder='Email' \n          placeholderTextColor=\"#BEBEBE\"\n          value={email}\n          onChangeText={setEmail} />\n        <View style={[AppStyles.rowContainer, AppStyles.topMargin]}>\n          <Text style={AppStyles.lightText}>Don't have an account? </Text>\n          <InlineTextButton text=\"Sign Up\" onPress={() => navigation.navigate(\"SignUp\")} />\n        </View>\n        <Button title=\"Reset Password\" onPress={resetPassword} color=\"#f7b267\" />\n      </KeyboardAvoidingView>\n    </ImageBackground>\n  );\n}\n\n\n","import { View, Text, TextInput, Button } from 'react-native';\nimport React from 'react';\nimport AppStyles from '../styles/AppStyles';\n\nexport default function AddToDoModal(props) {\n  let [todo, setTodo] = React.useState(\"\");\n  return (\n    <View style={AppStyles.container}>\n      <Text style={AppStyles.header}>Add ToDo</Text>\n      <TextInput \n          style={[AppStyles.textInput, AppStyles.darkTextInput]} \n          placeholder='ToDo'\n          value={todo}\n          onChangeText={setTodo} />\n      <View style={[AppStyles.rowContainer, AppStyles.rightAligned, AppStyles.rightMargin]}>\n        <Button title=\"Cancel\" onPress={props.onClose} />\n        <Button title=\"OK\" onPress={() => {\n          props.addToDo(todo);\n          setTodo(\"\");\n          props.onClose();\n        }} />\n      </View>\n    </View>\n  );\n}","import { View, Button, Text, Modal, SafeAreaView, ActivityIndicator, FlatList } from 'react-native';\nimport InlineTextButton from '../components/InlineTextButton';\nimport AppStyles from '../styles/AppStyles';\nimport { auth, db } from \"../firebase\";\nimport { collection, addDoc, query, where, getDocs, deleteDoc, doc, setDoc } from \"firebase/firestore\"; \nimport { sendEmailVerification } from 'firebase/auth';\nimport React from 'react';\nimport AddToDoModal from '../components/AddToDoModal';\nimport BouncyCheckbox from 'react-native-bouncy-checkbox';\n\nexport default function ToDo({ navigation }) {\n  let [modalVisible, setModalVisible] = React.useState(false);\n  let [isLoading, setIsLoading] = React.useState(true);\n  let [isRefreshing, setIsRefreshing] = React.useState(false);\n  let [toDos, setToDos] = React.useState([]);\n\n  let loadToDoList = async () => {\n    const q = query(collection(db, \"todos\"), where(\"userId\", \"==\", auth.currentUser.uid));\n\n    const querySnapshot = await getDocs(q);\n    let toDos = [];\n    querySnapshot.forEach((doc) => {\n      let toDo = doc.data();\n      toDo.id = doc.id;\n      toDos.push(toDo);\n    });\n\n    setToDos(toDos);\n    setIsLoading(false);\n    setIsRefreshing(false);\n  };\n\n  if (isLoading) {\n    loadToDoList();\n  }\n\n  let checkToDoItem = (item, isChecked) => {\n    const toDoRef = doc(db, 'todos', item.id);\n    setDoc(toDoRef, { completed: isChecked }, { merge: true });\n  };\n\n  let deleteToDo = async (toDoId) => {\n    await deleteDoc(doc(db, \"todos\", toDoId));\n    let updatedToDos = [...toDos].filter((item) => item.id != toDoId);\n    setToDos(updatedToDos);\n  };\n\n  let renderToDoItem = ({item}) => {\n    return (\n      <View style={[AppStyles.rowContainer, AppStyles.rightMargin, AppStyles.leftMargin]}>\n        <View style={AppStyles.fillSpace}>\n          <BouncyCheckbox\n            isChecked={item.complated}\n            size={25}\n            fillColor=\"#258ea6\"\n            unfillColor=\"#FFFFFF\"\n            text={item.text}\n            iconStyle={{ borderColor: \"#258ea6\" }}\n            onPress={(isChecked) => { checkToDoItem(item, isChecked)}}\n          />\n        </View>\n        <InlineTextButton text=\"Delete\" color=\"#258ea6\" onPress={() => deleteToDo(item.id)} />\n      </View>\n    );\n  }\n\n  let showToDoList = () => {\n    return (\n      <FlatList\n        data={toDos}\n        refreshing={isRefreshing}\n        onRefresh={() => {\n          loadToDoList();\n          setIsRefreshing(true);\n        }}\n        renderItem={renderToDoItem}\n        keyExtractor={item => item.id} />\n    )\n  };\n\n  let showContent = () => {\n    return (\n      <View>\n        {isLoading ? <ActivityIndicator size=\"large\" /> : showToDoList() }\n        <Button \n          title=\"Add ToDo\" \n          onPress={() => setModalVisible(true)} \n          color=\"#fb4d3d\" />\n      </View>\n    );\n  };\n\n  let showSendVerificationEmail = () => {\n    return (\n      <View>\n        <Text>Please verify your email to use ToDo</Text>\n        <Button title=\"Send Verification Email\" onPress={() => sendEmailVerification(auth.currentUser)} />\n      </View>\n    );\n  };\n\n  let addToDo = async (todo) => {\n    let toDoToSave = {\n      text: todo,\n      completed: false,\n      userId: auth.currentUser.uid\n    };\n    const docRef = await addDoc(collection(db, \"todos\"), toDoToSave);\n\n    toDoToSave.id = docRef.id;\n\n    let updatedToDos = [...toDos];\n    updatedToDos.push(toDoToSave);\n\n    setToDos(updatedToDos);\n  };\n  \n  return (\n    <SafeAreaView>\n      <View style={[AppStyles.rowContainer, AppStyles.rightAligned, AppStyles.rightMargin, AppStyles.topMargin]}>\n        <InlineTextButton text=\"Manage Account\" color=\"#258ea6\" onPress={() => navigation.navigate(\"ManageAccount\")}/>\n      </View>\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={modalVisible}\n        onRequestClose={() => setModalVisible(false)}>\n        <AddToDoModal \n          onClose={() => setModalVisible(false)}\n          addToDo={addToDo} />\n      </Modal>\n      <Text style={AppStyles.header}>ToDo</Text>\n      {auth.currentUser.emailVerified ? showContent() : showSendVerificationEmail()}\n    </SafeAreaView>\n  )\n}","import { Button, View, TextInput, Text } from 'react-native';\nimport React from 'react';\nimport AppStyles from '../styles/AppStyles';\nimport { auth, db } from \"../firebase\";\nimport { collection, query, where, getDocs, writeBatch } from \"firebase/firestore\"; \nimport { signOut, updatePassword, signInWithEmailAndPassword, deleteUser } from 'firebase/auth';\n\nexport default function ManageAccount({ navigation }) {\n  let [newPassword, setNewPassword] = React.useState(\"\");\n  let [currentPassword, setCurrentPassword] = React.useState(\"\");\n  let [errorMessage, setErrorMessage] = React.useState(\"\");\n  let logout = () => {\n    signOut(auth).then(() => {\n      navigation.popToTop();\n    });\n  }\n\n  let updateUserPassword = () => {\n    signInWithEmailAndPassword(auth, auth.currentUser.email, currentPassword)\n      .then((userCredential) => {\n        const user = userCredential.user;\n        updatePassword(user, newPassword).then(() => {\n          setNewPassword(\"\");\n          setErrorMessage(\"\");\n          setCurrentPassword(\"\");\n        }).catch((error) => {\n          setErrorMessage(error.message);\n        });\n      })\n      .catch((error) => {\n        setErrorMessage(error.message);\n      });\n  };\n\n  let deleteUserAndToDos = () => {\n    if (currentPassword === \"\") {\n      setErrorMessage(\"Must enter current password to delete account\");\n    } else {\n      signInWithEmailAndPassword(auth, auth.currentUser.email, currentPassword)\n      .then((userCredential) => {\n        const user = userCredential.user;\n\n        // Get all todos for user and delete\n        let batch = writeBatch(db);\n        const q = query(collection(db, \"todos\"), where(\"userId\", \"==\", user.uid));\n        getDocs(q).then((querySnapshot) => {\n          querySnapshot.forEach((doc) => {\n            batch.delete(doc.ref);\n          });\n          batch.commit();\n  \n          deleteUser(user).then(() => {\n            navigation.popToTop();\n          }).catch((error) => {\n            setErrorMessage(error.message);\n          });\n        });\n      })\n      .catch((error) => {\n        setErrorMessage(error.message);\n      });\n    }\n  };\n\n  return (\n    <View style={AppStyles.container}>\n      <Text style={AppStyles.errorText}>{errorMessage}</Text>\n      <TextInput \n          style={[AppStyles.textInput, AppStyles.darkTextInput]} \n          placeholder='Current Password'\n          value={currentPassword}\n          secureTextEntry={true}\n          onChangeText={setCurrentPassword} />\n      <TextInput \n          style={[AppStyles.textInput, AppStyles.darkTextInput]} \n          placeholder='New Password'\n          value={newPassword}\n          secureTextEntry={true}\n          onChangeText={setNewPassword} />\n      <Button title=\"Update Password\" onPress={updateUserPassword} />\n      <Button title=\"Delete User\" onPress={deleteUserAndToDos} />\n      <Button title=\"Logout\" onPress={logout} />\n      <Button title=\"Back to ToDos\" onPress={() => navigation.pop()} />\n    </View>\n  );\n}","import Login from './screens/Login';\nimport SignUp from './screens/SignUp';\nimport ResetPassword from './screens/ResetPassword';\nimport ToDo from './screens/ToDo';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport ManageAccount from './screens/ManageAccount';\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"Login\"\n          component={Login}\n          options={{headerShown: false}} />\n        <Stack.Screen\n          name=\"SignUp\"\n          component={SignUp}\n          options={{headerShown: false}} />\n        <Stack.Screen\n          name=\"ResetPassword\"\n          component={ResetPassword}\n          options={{headerShown: false}} />\n        <Stack.Screen\n          name=\"ManageAccount\"\n          component={ManageAccount}\n          options={{headerShown: false}} />\n        <Stack.Screen\n          name=\"ToDo\"\n          component={ToDo}\n          options={{headerShown: false}} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}","module.exports = __webpack_public_path__ + \"static/media/background.7399f3ff.jpg\";"],"sourceRoot":""}