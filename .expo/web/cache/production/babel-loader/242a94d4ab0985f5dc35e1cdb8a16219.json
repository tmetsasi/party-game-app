{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"initialRouteName\",\"children\",\"screenListeners\",\"screenOptions\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{createNavigatorFactory,StackActions,StackRouter,useNavigationBuilder}from'@react-navigation/native';import*as React from'react';import NativeStackView from\"../views/NativeStackView\";function NativeStackNavigator(_ref){var initialRouteName=_ref.initialRouteName,children=_ref.children,screenListeners=_ref.screenListeners,screenOptions=_ref.screenOptions,rest=_objectWithoutProperties(_ref,_excluded);var _useNavigationBuilder=useNavigationBuilder(StackRouter,{initialRouteName:initialRouteName,children:children,screenListeners:screenListeners,screenOptions:screenOptions}),state=_useNavigationBuilder.state,descriptors=_useNavigationBuilder.descriptors,navigation=_useNavigationBuilder.navigation,NavigationContent=_useNavigationBuilder.NavigationContent;React.useEffect(function(){var _navigation$addListen;return navigation===null||navigation===void 0?void 0:(_navigation$addListen=navigation.addListener)===null||_navigation$addListen===void 0?void 0:_navigation$addListen.call(navigation,'tabPress',function(e){var isFocused=navigation.isFocused();requestAnimationFrame(function(){if(state.index>0&&isFocused&&!e.defaultPrevented){navigation.dispatch(_objectSpread(_objectSpread({},StackActions.popToTop()),{},{target:state.key}));}});});},[navigation,state.index,state.key]);return React.createElement(NavigationContent,null,React.createElement(NativeStackView,_extends({},rest,{state:state,navigation:navigation,descriptors:descriptors})));}export default createNavigatorFactory(NativeStackNavigator);","map":{"version":3,"sources":["createNativeStackNavigator.tsx"],"names":["createNavigatorFactory","StackActions","StackRouter","useNavigationBuilder","React","NativeStackView","NativeStackNavigator","initialRouteName","children","screenListeners","screenOptions","rest","state","descriptors","navigation","NavigationContent","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"mappings":"owCAAA,OACEA,sBADF,CAKEC,YALF,CAOEC,WAPF,CASEC,oBATF,KAUO,0BAVP,CAWA,MAAO,GAAKC,MAAZ,KAAuB,OAAvB,CAOA,MAAOC,gBAAP,gCAEA,QAASC,qBAAT,CAAA,IAAA,CAM8B,CANA,GAC5BC,iBAD4B,CAMA,IAAA,CAL5BA,gBAD4B,CAE5BC,QAF4B,CAMA,IAAA,CAJ5BA,QAF4B,CAG5BC,eAH4B,CAMA,IAAA,CAH5BA,eAH4B,CAI5BC,aAJ4B,CAMA,IAAA,CAF5BA,aAJ4B,CAKzBC,IAAAA,0BACyB,IAAA,YAC5B,0BACER,oBAAoB,CAMlBD,WANkB,CAML,CACbK,gBADa,CACbA,gBADa,CAEbC,QAFa,CAEbA,QAFa,CAGbC,eAHa,CAGbA,eAHa,CAIbC,aAAAA,CAAAA,aAJa,CANK,CADtB,CAAQE,KAAF,uBAAEA,KAAF,CAASC,WAAT,uBAASA,WAAT,CAAsBC,UAAtB,uBAAsBA,UAAtB,CAAkCC,iBAAAA,uBAAAA,iBAAAA,CAcxCX,KAAK,CAACY,SAANZ,CACE,UAAA,CAAA,GAAA,sBAAA,CAAA,MACEU,WADF,GAAA,IAAA,EACEA,UADF,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,CAAA,qBAAA,CACEA,UAAU,CAAEG,WADd,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CACEH,qBAAAA,CAAAA,IAAAA,CAAAA,UAAU,CAAgB,UAAhB,CAA6BI,SAAAA,CAAD,CAAY,CAChD,GAAMC,UAAS,CAAGL,UAAU,CAACK,SAAXL,EAD8B,CAKhDM,qBAAqB,CAAC,UAAM,CAC1B,GACER,KAAK,CAACS,KAANT,CAAc,CAAdA,EACAO,SADAP,EAEA,CAAEM,CAAD,CAAkCI,gBAHrC,CAIE,CAGAR,UAAU,CAACS,QAAXT,gCACKb,YAAY,CAACuB,QAAbvB,EADe,MAElBwB,MAAM,CAAEb,KAAK,CAACc,GAAAA,GAFhBZ,CAID,CACF,CAboB,CAArBM,CAcD,CAnBS,CADZ,CAAA,CADFhB,CAsBE,CAACU,UAAD,CAAaF,KAAK,CAACS,KAAnB,CAA0BT,KAAK,CAACc,GAAhC,CAtBFtB,CAAAA,CAyBA,MACE,MAAA,CAAA,aAAA,CAAC,iBAAD,CAAA,IAAA,CACE,KAAA,CAAA,aAAA,CAAC,eAAD,CAAA,QAAA,CAAA,CAAA,CAAA,CACMO,IADN,CAAA,CAEE,KAAK,CAAEC,KAFT,CAGE,UAAU,CAAEE,UAHd,CAIE,WAAW,CAAED,WAJf,CAAA,CAAA,CADF,CADF,CAUD,CAED,cAAeb,uBAAsB,CAKnCM,oBALmC,CAArC","sourcesContent":["import {\n  createNavigatorFactory,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      NativeStackNavigationOptions,\n      NativeStackNavigationEventMap\n    >(StackRouter, {\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      navigation?.addListener?.('tabPress', (e: any) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <NativeStackView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]},"metadata":{},"sourceType":"module"}