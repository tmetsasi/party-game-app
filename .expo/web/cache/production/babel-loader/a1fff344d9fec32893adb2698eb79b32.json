{"ast":null,"code":"function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';export default function useComponent(Component,props){var propsRef=React.useRef(props);propsRef.current=props;React.useEffect(function(){propsRef.current=null;});return React.useRef(function(rest){var props=propsRef.current;if(props===null){throw new Error('The returned component must be rendered in the same render phase as the hook.');}return React.createElement(Component,_extends({},props,rest));}).current;}","map":{"version":3,"sources":["useComponent.tsx"],"names":["React","useComponent","Component","props","propsRef","useRef","current","useEffect","rest","Error"],"mappings":"uRAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAEA,cAAe,SAASC,aAAT,CAGbC,SAHa,CAGCC,KAHD,CAGW,CACxB,GAAMC,SAAQ,CAAGJ,KAAK,CAACK,MAANL,CAAuBG,KAAvBH,CADO,CAMxBI,QAAQ,CAACE,OAATF,CAAmBD,KAAnBC,CAEAJ,KAAK,CAACO,SAANP,CAAgB,UAAM,CACpBI,QAAQ,CAACE,OAATF,CAAmB,IAAnBA,CACD,CAFDJ,CAAAA,CAIA,MAAO,MAAK,CAACK,MAAN,CAAcG,SAAAA,IAAD,CAAkD,CACpE,GAAML,MAAK,CAAGC,QAAQ,CAACE,OAAvB,CAEA,GAAIH,KAAK,GAAK,IAAd,CAAoB,CAClB,KAAM,IAAIM,MAAJ,CACJ,+EADI,CAAN,CAJkE,CAUpE,MAAO,MAAA,CAAA,aAAA,CAAC,SAAD,CAAA,QAAA,CAAA,CAAA,CAAA,CAAeN,KAAf,CAA0BK,IAA1B,CAAA,CAAP,CACD,CAXM,CAAA,CAWJF,OAXH,CAYD","sourcesContent":["import * as React from 'react';\n\nexport default function useComponent<\n  T extends React.ComponentType<any>,\n  P extends {}\n>(Component: T, props: P) {\n  const propsRef = React.useRef<P | null>(props);\n\n  // Normally refs shouldn't be mutated in render\n  // But we return a component which will be rendered\n  // So it's just for immediate consumption\n  propsRef.current = props;\n\n  React.useEffect(() => {\n    propsRef.current = null;\n  });\n\n  return React.useRef((rest: Omit<React.ComponentProps<T>, keyof P>) => {\n    const props = propsRef.current;\n\n    if (props === null) {\n      throw new Error(\n        'The returned component must be rendered in the same render phase as the hook.'\n      );\n    }\n\n    // @ts-expect-error: the props should be fine here\n    return <Component {...props} {...rest} />;\n  }).current;\n}\n"]},"metadata":{},"sourceType":"module"}