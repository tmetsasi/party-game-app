{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";import NavigationRouteContext from\"./NavigationRouteContext\";var VISITED_ROUTE_KEYS=Symbol('VISITED_ROUTE_KEYS');export var shouldPreventRemove=function shouldPreventRemove(emitter,beforeRemoveListeners,currentRoutes,nextRoutes,action){var _action$VISITED_ROUTE;var nextRouteKeys=nextRoutes.map(function(route){return route.key;});var removedRoutes=currentRoutes.filter(function(route){return!nextRouteKeys.includes(route.key);}).reverse();var visitedRouteKeys=(_action$VISITED_ROUTE=action[VISITED_ROUTE_KEYS])!==null&&_action$VISITED_ROUTE!==void 0?_action$VISITED_ROUTE:new Set();var beforeRemoveAction=_objectSpread(_objectSpread({},action),{},_defineProperty({},VISITED_ROUTE_KEYS,visitedRouteKeys));for(var route of removedRoutes){var _beforeRemoveListener;if(visitedRouteKeys.has(route.key)){continue;}var isPrevented=(_beforeRemoveListener=beforeRemoveListeners[route.key])===null||_beforeRemoveListener===void 0?void 0:_beforeRemoveListener.call(beforeRemoveListeners,beforeRemoveAction);if(isPrevented){return true;}visitedRouteKeys.add(route.key);var event=emitter.emit({type:'beforeRemove',target:route.key,data:{action:beforeRemoveAction},canPreventDefault:true});if(event.defaultPrevented){return true;}}return false;};export default function useOnPreventRemove(_ref){var getState=_ref.getState,emitter=_ref.emitter,beforeRemoveListeners=_ref.beforeRemoveListeners;var _React$useContext=React.useContext(NavigationBuilderContext),addKeyedListener=_React$useContext.addKeyedListener;var route=React.useContext(NavigationRouteContext);var routeKey=route===null||route===void 0?void 0:route.key;React.useEffect(function(){if(routeKey){return addKeyedListener===null||addKeyedListener===void 0?void 0:addKeyedListener('beforeRemove',routeKey,function(action){var state=getState();return shouldPreventRemove(emitter,beforeRemoveListeners,state.routes,[],action);});}},[addKeyedListener,beforeRemoveListeners,emitter,getState,routeKey]);}","map":{"version":3,"sources":["useOnPreventRemove.tsx"],"names":["React","NavigationBuilderContext","NavigationRouteContext","VISITED_ROUTE_KEYS","Symbol","shouldPreventRemove","emitter","beforeRemoveListeners","currentRoutes","nextRoutes","action","nextRouteKeys","map","route","key","removedRoutes","filter","includes","reverse","visitedRouteKeys","Set","beforeRemoveAction","has","isPrevented","add","event","emit","type","target","data","canPreventDefault","defaultPrevented","useOnPreventRemove","getState","addKeyedListener","useContext","routeKey","useEffect","state","routes"],"mappings":"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","sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options = {\n  getState: () => NavigationState;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n};\n\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\n\nexport const shouldPreventRemove = (\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\n  currentRoutes: { key: string }[],\n  nextRoutes: { key?: string | undefined }[],\n  action: NavigationAction\n) => {\n  const nextRouteKeys = nextRoutes.map((route) => route.key);\n\n  // Call these in reverse order so last screens handle the event first\n  const removedRoutes = currentRoutes\n    .filter((route) => !nextRouteKeys.includes(route.key))\n    .reverse();\n\n  const visitedRouteKeys: Set<string> =\n    // @ts-expect-error: add this property to mark that we've already emitted this action\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\n\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\n  };\n\n  for (const route of removedRoutes) {\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: { action: beforeRemoveAction },\n      canPreventDefault: true,\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route?.key;\n\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\n        const state = getState();\n\n        return shouldPreventRemove(\n          emitter,\n          beforeRemoveListeners,\n          state.routes,\n          [],\n          action\n        );\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n"]},"metadata":{},"sourceType":"module"}