{"ast":null,"code":"import*as React from'react';export default function useChildListeners(){var _React$useRef=React.useRef({action:[],focus:[]}),listeners=_React$useRef.current;var addListener=React.useCallback(function(type,listener){listeners[type].push(listener);return function(){var index=listeners[type].indexOf(listener);listeners[type].splice(index,1);};},[listeners]);return{listeners:listeners,addListener:addListener};}","map":{"version":3,"sources":["useChildListeners.tsx"],"names":["React","useChildListeners","current","listeners","useRef","action","focus","addListener","useCallback","type","listener","push","index","indexOf","splice"],"mappings":"AAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAOA,cAAe,SAASC,kBAAT,EAA6B,CAC1C,kBAA+B,KAAK,CAACG,MAAN,CAE5B,CACDC,MAAM,CAAE,EADP,CAEDC,KAAK,CAAE,EAFN,CAF4B,CAA/B,CAAiBH,SAAAA,eAATD,OAAO,CAOf,GAAMK,YAAW,CAAG,KAAK,CAACC,WAAN,CAClB,SAA8BC,IAA9B,CAAuCC,QAAvC,CAAoE,CAElEP,SAAS,CAACM,IAAD,CAATN,CAAgBQ,IAAhBR,CAAqBO,QAArBP,CAAAA,CAEA,MAAO,WAAM,CAEX,GAAMS,MAAK,CAAGT,SAAS,CAACM,IAAD,CAATN,CAAgBU,OAAhBV,CAAwBO,QAAxBP,CAAd,CAEAA,SAAS,CAACM,IAAD,CAATN,CAAgBW,MAAhBX,CAAuBS,KAAvBT,CAA8B,CAA9BA,CAAAA,CACD,CALD,CAMD,CAXiB,CAYlB,CAACA,SAAD,CAZkB,CAApB,CAeA,MAAO,CACLA,SADK,CACLA,SADK,CAELI,WAAAA,CAAAA,WAFK,CAAP,CAID","sourcesContent":["import * as React from 'react';\n\nimport type { ListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add action listeners.\n */\nexport default function useChildListeners() {\n  const { current: listeners } = React.useRef<{\n    [K in keyof ListenerMap]: ListenerMap[K][];\n  }>({\n    action: [],\n    focus: [],\n  });\n\n  const addListener = React.useCallback(\n    <T extends keyof ListenerMap>(type: T, listener: ListenerMap[T]) => {\n      // @ts-expect-error: listener should be correct type according to `type`\n      listeners[type].push(listener);\n\n      return () => {\n        // @ts-expect-error: listener should be correct type according to `type`\n        const index = listeners[type].indexOf(listener);\n\n        listeners[type].splice(index, 1);\n      };\n    },\n    [listeners]\n  );\n\n  return {\n    listeners,\n    addListener,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}