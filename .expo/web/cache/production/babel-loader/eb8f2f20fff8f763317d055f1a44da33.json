{"ast":null,"code":"import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";export default function useFocusedListenersChildrenAdapter(_ref){var navigation=_ref.navigation,focusedListeners=_ref.focusedListeners;var _React$useContext=React.useContext(NavigationBuilderContext),addListener=_React$useContext.addListener;var listener=React.useCallback(function(callback){if(navigation.isFocused()){for(var _listener of focusedListeners){var _listener2=_listener(callback),handled=_listener2.handled,result=_listener2.result;if(handled){return{handled:handled,result:result};}}return{handled:true,result:callback(navigation)};}else{return{handled:false,result:null};}},[focusedListeners,navigation]);React.useEffect(function(){return addListener===null||addListener===void 0?void 0:addListener('focus',listener);},[addListener,listener]);}","map":{"version":3,"sources":["useFocusedListenersChildrenAdapter.tsx"],"names":["React","NavigationBuilderContext","useFocusedListenersChildrenAdapter","navigation","focusedListeners","addListener","useContext","listener","useCallback","callback","isFocused","handled","result","useEffect"],"mappings":"AACA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAEA,MAAOC,yBAAP,kCAcA,cAAe,SAASC,mCAAT,CAAA,IAAA,CAGH,CAH+C,GACzDC,WADyD,CAG/C,IAAA,CAFVA,UADyD,CAEzDC,gBAAAA,CACU,IAAA,CADVA,gBAAAA,CAEA,sBAAwBJ,KAAK,CAACM,UAANN,CAAiBC,wBAAjBD,CAAxB,CAAQK,WAAAA,mBAAAA,WAAAA,CAER,GAAME,SAAQ,CAAG,KAAK,CAACC,WAAN,CACdC,SAAAA,QAAD,CAA8C,CAC5C,GAAIN,UAAU,CAACO,SAAXP,EAAJ,CAA4B,CAC1B,IAAK,GAAMI,UAAX,GAAuBH,iBAAvB,CAAyC,CACvC,eAA4BG,SAAQ,CAACE,QAAD,CAApC,CAAQE,OAAF,YAAEA,OAAF,CAAWC,MAAAA,YAAAA,MAAAA,CAEjB,GAAID,OAAJ,CAAa,CACX,MAAO,CAAEA,OAAF,CAAEA,OAAF,CAAWC,MAAAA,CAAAA,MAAX,CAAP,CACD,CACF,CAED,MAAO,CAAED,OAAO,CAAE,IAAX,CAAiBC,MAAM,CAAEH,QAAQ,CAACN,UAAD,CAAjC,CAAP,CACD,CAVD,IAUO,CACL,MAAO,CAAEQ,OAAO,CAAE,KAAX,CAAkBC,MAAM,CAAE,IAA1B,CAAP,CACD,CACF,CAfc,CAgBf,CAACR,gBAAD,CAAmBD,UAAnB,CAhBe,CAAjB,CAmBAH,KAAK,CAACa,SAANb,CACE,iBAAMK,YAAN,GAAA,IAAA,EAAMA,WAAN,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAMA,WAAW,CAAG,OAAH,CAAYE,QAAZ,CADnBP,GAEE,CAACK,WAAD,CAAcE,QAAd,CAFFP,CAAAA,CAID","sourcesContent":["import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(\n    () => addListener?.('focus', listener),\n    [addListener, listener]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}