{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var formatToList=function formatToList(items){return items.map(function(key){return\"- \"+key;}).join('\\n');};export default function validatePathConfig(config){var root=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var validKeys=['initialRouteName','screens'];if(!root){validKeys.push('path','exact','stringify','parse');}var invalidKeys=Object.keys(config).filter(function(key){return!validKeys.includes(key);});if(invalidKeys.length){throw new Error(\"Found invalid properties in the configuration:\\n\"+formatToList(invalidKeys)+\"\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n\"+formatToList(validKeys)+\"\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");}if(config.screens){Object.entries(config.screens).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),_=_ref2[0],value=_ref2[1];if(typeof value!=='string'){validatePathConfig(value,false);}});}}","map":{"version":3,"sources":["validatePathConfig.tsx"],"names":["formatToList","items","map","key","join","validatePathConfig","config","root","validKeys","push","invalidKeys","Object","keys","filter","includes","length","Error","screens","entries","forEach","_","value"],"mappings":"iEAAA,GAAMA,aAAY,CAAIC,QAAhBD,aAAY,CAAIC,KAAD,QACnBA,MAAK,CAACC,GAAND,CAAWE,SAAAA,GAAD,aAAcA,GAAI,EAA5BF,CAAAA,CAA+BG,IAA/BH,CAAoC,IAApCA,CADF,GAGA,cAAe,SAASI,mBAAT,CAA4BC,MAA5B,CAAsD,CAAA,GAAbC,KAAa,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAN,IAAM,CACnE,GAAMC,UAAS,CAAG,CAAC,kBAAD,CAAqB,SAArB,CAAlB,CAEA,GAAI,CAACD,IAAL,CAAW,CACTC,SAAS,CAACC,IAAVD,CAAe,MAAfA,CAAuB,OAAvBA,CAAgC,WAAhCA,CAA6C,OAA7CA,CAAAA,CACD,CAED,GAAME,YAAW,CAAGC,MAAM,CAACC,IAAPD,CAAYL,MAAZK,CAAAA,CAAoBE,MAApBF,CACjBR,SAAAA,GAAD,QAAS,CAACK,SAAS,CAACM,QAAVN,CAAmBL,GAAnBK,CADQG,GAApB,CAIA,GAAID,WAAW,CAACK,MAAhB,CAAwB,CACtB,KAAM,IAAIC,MAAJ,oDAC+ChB,YAAY,CAC7DU,WAD6D,CAE7D,sHAAoHV,YAAY,CAChIQ,SADgI,CAH9H,0HAAN,CAOD,CAED,GAAIF,MAAM,CAACW,OAAX,CAAoB,CAClBN,MAAM,CAACO,OAAPP,CAAeL,MAAM,CAACW,OAAtBN,CAAAA,CAA+BQ,OAA/BR,CAAuC,SAAA,IAAA,CAAgB,CAAf,yBAAe,IAAA,IAAdS,CAAD,UAAIC,KAAJ,UACtC,GAAI,MAAOA,MAAP,GAAiB,QAArB,CAA+B,CAC7BhB,kBAAkB,CAACgB,KAAD,CAAQ,KAAR,CAAlBhB,CACD,CACF,CAJDM,CAAAA,CAKD,CACF","sourcesContent":["const formatToList = (items: string[]) =>\n  items.map((key) => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config: any, root = true) {\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(\n    (key) => !validKeys.includes(key)\n  );\n\n  if (invalidKeys.length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        invalidKeys\n      )}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validKeys\n      )}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}