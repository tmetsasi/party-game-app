{"ast":null,"code":"import{CurrentRenderContext}from'@react-navigation/core';import*as React from'react';import ServerContext from\"./ServerContext\";export default React.forwardRef(function ServerContainer(_ref,ref){var children=_ref.children,location=_ref.location;React.useEffect(function(){console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");},[]);var current={};if(ref){var value={getCurrentOptions:function getCurrentOptions(){return current.options;}};if(typeof ref==='function'){ref(value);}else{ref.current=value;}}return React.createElement(ServerContext.Provider,{value:{location:location}},React.createElement(CurrentRenderContext.Provider,{value:current},children));});","map":{"version":3,"sources":["ServerContainer.tsx"],"names":["CurrentRenderContext","React","ServerContext","forwardRef","ServerContainer","children","location","ref","useEffect","console","error","current","value","getCurrentOptions","options"],"mappings":"AAAA,OAASA,oBAAT,KAAqC,wBAArC,CACA,MAAO,GAAKC,MAAZ,KAAuB,OAAvB,CAEA,MAAOC,cAAP,uBAcA,cAAe,MAAK,CAACC,UAAN,CAAiB,QAASC,gBAAT,CAAA,IAAA,CAE9BG,GAF8B,CAG9B,CAFA,GAAEF,SAAF,CAEA,IAAA,CAFEA,QAAF,CAAYC,QAAAA,CAEZ,IAAA,CAFYA,QAAAA,CAGZL,KAAK,CAACO,SAANP,CAAgB,UAAM,CACpBQ,OAAO,CAACC,KAARD,CACE,sFADFA,CAAAA,CAGD,CAJDR,CAIG,EAJHA,CAAAA,CAMA,GAAMU,QAA6B,CAAG,CAAA,CAAtC,CAEA,GAAIJ,GAAJ,CAAS,CACP,GAAMK,MAAK,CAAG,CACZC,iBAAiB,6BAAG,CAClB,MAAOF,QAAO,CAACG,OAAf,CACD,CAHW,CADP,CAWP,GAAI,MAAOP,IAAP,GAAe,UAAnB,CAA+B,CAC7BA,GAAG,CAACK,KAAD,CAAHL,CACD,CAFD,IAEO,CAELA,GAAG,CAACI,OAAJJ,CAAcK,KAAdL,CACD,CACF,CAED,MACE,MAAA,CAAA,aAAA,CAAC,aAAD,CAAe,QAAf,CAAA,CAAwB,KAAK,CAAE,CAAED,QAAAA,CAAAA,QAAF,CAA/B,CAAA,CACE,KAAA,CAAA,aAAA,CAAC,oBAAD,CAAsB,QAAtB,CAAA,CAA+B,KAAK,CAAEK,OAAtC,CAAA,CACGN,QADH,CADF,CADF,CAOD,CAtCc,CAAf","sourcesContent":["import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\n\nimport ServerContext, { ServerContextType } from './ServerContext';\nimport type { ServerContainerRef } from './types';\n\ntype Props = ServerContextType & {\n  children: React.ReactNode;\n};\n\n/**\n * Container component for server rendering.\n *\n * @param props.location Location object to base the initial URL for SSR.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which contains helper methods.\n */\nexport default React.forwardRef(function ServerContainer(\n  { children, location }: Props,\n  ref: React.Ref<ServerContainerRef>\n) {\n  React.useEffect(() => {\n    console.error(\n      \"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\"\n    );\n  }, []);\n\n  const current: { options?: object } = {};\n\n  if (ref) {\n    const value = {\n      getCurrentOptions() {\n        return current.options;\n      },\n    };\n\n    // We write to the `ref` during render instead of `React.useImperativeHandle`\n    // This is because `useImperativeHandle` will update the ref after 'commit',\n    // and there's no 'commit' phase during SSR.\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\n      ref.current = value;\n    }\n  }\n\n  return (\n    <ServerContext.Provider value={{ location }}>\n      <CurrentRenderContext.Provider value={current}>\n        {children}\n      </CurrentRenderContext.Provider>\n    </ServerContext.Provider>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}