{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import escape from'escape-string-regexp';import*as queryString from'query-string';import findFocusedRoute from\"./findFocusedRoute\";import validatePathConfig from\"./validatePathConfig\";export default function getStateFromPath(path,options){var _ref;if(options){validatePathConfig(options);}var initialRoutes=[];if(options!==null&&options!==void 0&&options.initialRouteName){initialRoutes.push({initialRouteName:options.initialRouteName,parentScreens:[]});}var screens=options===null||options===void 0?void 0:options.screens;var remaining=path.replace(/\\/+/g,'/').replace(/^\\//,'').replace(/\\?.*$/,'');remaining=remaining.endsWith('/')?remaining:remaining+\"/\";if(screens===undefined){var _routes=remaining.split('/').filter(Boolean).map(function(segment){var name=decodeURIComponent(segment);return{name:name};});if(_routes.length){return createNestedStateObject(path,_routes,initialRoutes);}return undefined;}var configs=(_ref=[]).concat.apply(_ref,_toConsumableArray(Object.keys(screens).map(function(key){return createNormalizedConfigs(key,screens,[],initialRoutes,[]);}))).sort(function(a,b){if(a.pattern===b.pattern){return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));}if(a.pattern.startsWith(b.pattern)){return-1;}if(b.pattern.startsWith(a.pattern)){return 1;}var aParts=a.pattern.split('/');var bParts=b.pattern.split('/');for(var i=0;i<Math.max(aParts.length,bParts.length);i++){if(aParts[i]==null){return 1;}if(bParts[i]==null){return-1;}var aWildCard=aParts[i]==='*'||aParts[i].startsWith(':');var bWildCard=bParts[i]==='*'||bParts[i].startsWith(':');if(aWildCard&&bWildCard){continue;}if(aWildCard){return 1;}if(bWildCard){return-1;}}return bParts.length-aParts.length;});configs.reduce(function(acc,config){if(acc[config.pattern]){var a=acc[config.pattern].routeNames;var b=config.routeNames;var intersects=a.length>b.length?b.every(function(it,i){return a[i]===it;}):a.every(function(it,i){return b[i]===it;});if(!intersects){throw new Error(\"Found conflicting screens with the same pattern. The pattern '\"+config.pattern+\"' resolves to both '\"+a.join(' > ')+\"' and '\"+b.join(' > ')+\"'. Patterns must be unique and cannot resolve to more than one screen.\");}}return Object.assign(acc,_defineProperty({},config.pattern,config));},{});if(remaining==='/'){var match=configs.find(function(config){return config.path===''&&config.routeNames.every(function(name){var _configs$find;return!((_configs$find=configs.find(function(c){return c.screen===name;}))!==null&&_configs$find!==void 0&&_configs$find.path);});});if(match){return createNestedStateObject(path,match.routeNames.map(function(name){return{name:name};}),initialRoutes,configs);}return undefined;}var result;var current;var _matchAgainstConfigs=matchAgainstConfigs(remaining,configs.map(function(c){return _objectSpread(_objectSpread({},c),{},{regex:c.regex?new RegExp(c.regex.source+'$'):undefined});})),routes=_matchAgainstConfigs.routes,remainingPath=_matchAgainstConfigs.remainingPath;if(routes!==undefined){current=createNestedStateObject(path,routes,initialRoutes,configs);remaining=remainingPath;result=current;}if(current==null||result==null){return undefined;}return result;}var joinPaths=function joinPaths(){var _ref2;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref2=[]).concat.apply(_ref2,_toConsumableArray(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};var matchAgainstConfigs=function matchAgainstConfigs(remaining,configs){var routes;var remainingPath=remaining;var _loop=function _loop(){if(!config.regex){return\"continue\";}var match=remainingPath.match(config.regex);if(match){var matchedParams=(_config$pattern=config.pattern)===null||_config$pattern===void 0?void 0:_config$pattern.split('/').filter(function(p){return p.startsWith(':');}).reduce(function(acc,p,i){return Object.assign(acc,_defineProperty({},p,match[(i+1)*2].replace(/\\//,'')));},{});routes=config.routeNames.map(function(name){var _config$path;var config=configs.find(function(c){return c.screen===name;});var params=config===null||config===void 0?void 0:(_config$path=config.path)===null||_config$path===void 0?void 0:_config$path.split('/').filter(function(p){return p.startsWith(':');}).reduce(function(acc,p){var value=matchedParams[p];if(value){var _config$parse;var key=p.replace(/^:/,'').replace(/\\?$/,'');acc[key]=(_config$parse=config.parse)!==null&&_config$parse!==void 0&&_config$parse[key]?config.parse[key](value):value;}return acc;},{});if(params&&Object.keys(params).length){return{name:name,params:params};}return{name:name};});remainingPath=remainingPath.replace(match[1],'');return\"break\";}};for(var config of configs){var _config$pattern;var _ret=_loop();if(_ret===\"continue\")continue;if(_ret===\"break\")break;}return{routes:routes,remainingPath:remainingPath};};var createNormalizedConfigs=function createNormalizedConfigs(screen,routeConfig){var routeNames=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var initials=arguments.length>3?arguments[3]:undefined;var parentScreens=arguments.length>4?arguments[4]:undefined;var parentPattern=arguments.length>5?arguments[5]:undefined;var configs=[];routeNames.push(screen);parentScreens.push(screen);var config=routeConfig[screen];if(typeof config==='string'){var pattern=parentPattern?joinPaths(parentPattern,config):config;configs.push(createConfigItem(screen,routeNames,pattern,config));}else if(typeof config==='object'){var _pattern2;if(typeof config.path==='string'){if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}_pattern2=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';configs.push(createConfigItem(screen,routeNames,_pattern2,config.path,config.parse));}if(config.screens){if(config.initialRouteName){initials.push({initialRouteName:config.initialRouteName,parentScreens:parentScreens});}Object.keys(config.screens).forEach(function(nestedConfig){var _pattern;var result=createNormalizedConfigs(nestedConfig,config.screens,routeNames,initials,_toConsumableArray(parentScreens),(_pattern=_pattern2)!==null&&_pattern!==void 0?_pattern:parentPattern);configs.push.apply(configs,_toConsumableArray(result));});}}routeNames.pop();return configs;};var createConfigItem=function createConfigItem(screen,routeNames,pattern,path,parse){pattern=pattern.split('/').filter(Boolean).join('/');var regex=pattern?new RegExp(\"^(\"+pattern.split('/').map(function(it){if(it.startsWith(':')){return\"(([^/]+\\\\/)\"+(it.endsWith('?')?'?':'')+\")\";}return(it==='*'?'.*':escape(it))+\"\\\\/\";}).join('')+\")\"):undefined;return{screen:screen,regex:regex,pattern:pattern,path:path,routeNames:_toConsumableArray(routeNames),parse:parse};};var findParseConfigForRoute=function findParseConfigForRoute(routeName,flatConfig){for(var config of flatConfig){if(routeName===config.routeNames[config.routeNames.length-1]){return config.parse;}}return undefined;};var findInitialRoute=function findInitialRoute(routeName,parentScreens,initialRoutes){for(var config of initialRoutes){if(parentScreens.length===config.parentScreens.length){var sameParents=true;for(var i=0;i<parentScreens.length;i++){if(parentScreens[i].localeCompare(config.parentScreens[i])!==0){sameParents=false;break;}}if(sameParents){return routeName!==config.initialRouteName?config.initialRouteName:undefined;}}}return undefined;};var createStateObject=function createStateObject(initialRoute,route,isEmpty){if(isEmpty){if(initialRoute){return{index:1,routes:[{name:initialRoute},route]};}else{return{routes:[route]};}}else{if(initialRoute){return{index:1,routes:[{name:initialRoute},_objectSpread(_objectSpread({},route),{},{state:{routes:[]}})]};}else{return{routes:[_objectSpread(_objectSpread({},route),{},{state:{routes:[]}})]};}}};var createNestedStateObject=function createNestedStateObject(path,routes,initialRoutes,flatConfig){var state;var route=routes.shift();var parentScreens=[];var initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);parentScreens.push(route.name);state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){var nestedState=state;while(route=routes.shift()){initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);var nestedStateIndex=nestedState.index||nestedState.routes.length-1;nestedState.routes[nestedStateIndex].state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){nestedState=nestedState.routes[nestedStateIndex].state;}parentScreens.push(route.name);}}route=findFocusedRoute(state);route.path=path;var params=parseQueryParams(path,flatConfig?findParseConfigForRoute(route.name,flatConfig):undefined);if(params){route.params=_objectSpread(_objectSpread({},route.params),params);}return state;};var parseQueryParams=function parseQueryParams(path,parseConfig){var query=path.split('?')[1];var params=queryString.parse(query);if(parseConfig){Object.keys(params).forEach(function(name){if(parseConfig[name]&&typeof params[name]==='string'){params[name]=parseConfig[name](params[name]);}});}return Object.keys(params).length?params:undefined;};","map":{"version":3,"mappings":"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","names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","match","find","c","screen","_configs$find","result","current","matchAgainstConfigs","regex","RegExp","source","remainingPath","joinPaths","paths","p","matchedParams","_config$pattern","params","_config$path","value","parse","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query"],"sources":["getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]},"metadata":{},"sourceType":"module"}