{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function _toPropertyKey(arg){var key=_toPrimitive(arg,\"string\");return typeof key===\"symbol\"?key:String(key);}function _toPrimitive(input,hint){if(typeof input!==\"object\"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||\"default\");if(typeof res!==\"object\")return res;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(hint===\"string\"?String:Number)(input);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";import NavigationContext from\"./NavigationContext\";import NavigationRouteContext from\"./NavigationRouteContext\";import SceneView from\"./SceneView\";import useNavigationCache from\"./useNavigationCache\";import useRouteCache from\"./useRouteCache\";export default function useDescriptors(_ref){var state=_ref.state,screens=_ref.screens,navigation=_ref.navigation,screenOptions=_ref.screenOptions,defaultScreenOptions=_ref.defaultScreenOptions,onAction=_ref.onAction,getState=_ref.getState,setState=_ref.setState,addListener=_ref.addListener,addKeyedListener=_ref.addKeyedListener,onRouteFocus=_ref.onRouteFocus,router=_ref.router,emitter=_ref.emitter;var _React$useState=React.useState({}),_React$useState2=_slicedToArray(_React$useState,2),options=_React$useState2[0],setOptions=_React$useState2[1];var _React$useContext=React.useContext(NavigationBuilderContext),onDispatchAction=_React$useContext.onDispatchAction,onOptionsChange=_React$useContext.onOptionsChange,stackRef=_React$useContext.stackRef;var context=React.useMemo(function(){return{navigation:navigation,onAction:onAction,addListener:addListener,addKeyedListener:addKeyedListener,onRouteFocus:onRouteFocus,onDispatchAction:onDispatchAction,onOptionsChange:onOptionsChange,stackRef:stackRef};},[navigation,onAction,addListener,addKeyedListener,onRouteFocus,onDispatchAction,onOptionsChange,stackRef]);var navigations=useNavigationCache({state:state,getState:getState,navigation:navigation,setOptions:setOptions,router:router,emitter:emitter});var routes=useRouteCache(state.routes);return routes.reduce(function(acc,route,i){var config=screens[route.name];var screen=config.props;var navigation=navigations[route.key];var optionsList=[screenOptions].concat(_toConsumableArray(config.options?config.options.filter(Boolean):[]),[screen.options,options[route.key]]);var customOptions=optionsList.reduce(function(acc,curr){return Object.assign(acc,typeof curr!=='function'?curr:curr({route:route,navigation:navigation}));},{});var mergedOptions=_objectSpread(_objectSpread({},typeof defaultScreenOptions==='function'?defaultScreenOptions({route:route,navigation:navigation,options:customOptions}):defaultScreenOptions),customOptions);var clearOptions=function clearOptions(){return setOptions(function(o){if(route.key in o){var _route$key=route.key,_=o[_route$key],rest=_objectWithoutProperties(o,[_route$key].map(_toPropertyKey));return rest;}return o;});};acc[route.key]={route:route,navigation:navigation,render:function render(){return React.createElement(NavigationBuilderContext.Provider,{key:route.key,value:context},React.createElement(NavigationContext.Provider,{value:navigation},React.createElement(NavigationRouteContext.Provider,{value:route},React.createElement(SceneView,{navigation:navigation,route:route,screen:screen,routeState:state.routes[i].state,getState:getState,setState:setState,options:mergedOptions,clearOptions:clearOptions}))));},options:mergedOptions};return acc;},{});}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["React","NavigationBuilderContext","NavigationContext","NavigationRouteContext","SceneView","useNavigationCache","useRouteCache","useDescriptors","state","screens","navigation","screenOptions","defaultScreenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","options","setOptions","useState","onDispatchAction","onOptionsChange","stackRef","useContext","context","useMemo","navigations","routes","reduce","acc","route","i","config","name","screen","props","key","optionsList","filter","Boolean","customOptions","curr","assign","mergedOptions","clearOptions","o","_","rest","render"],"mappings":"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","sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  AddKeyedListener,\n  AddListener,\n} from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport type {\n  Descriptor,\n  EventMapBase,\n  NavigationHelpers,\n  NavigationProp,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n\nexport type ScreenConfigWithParent<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  keys: (string | undefined)[];\n  options: (ScreenOptionsOrCallback<ScreenOptions> | undefined)[] | undefined;\n  props: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n};\n\ntype ScreenOptionsOrCallback<ScreenOptions extends {}> =\n  | ScreenOptions\n  | ((props: {\n      route: RouteProp<ParamListBase, string>;\n      navigation: any;\n    }) => ScreenOptions);\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?: ScreenOptionsOrCallback<ScreenOptions>;\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange, stackRef } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions, EventMap>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<\n      string,\n      Descriptor<\n        ScreenOptions,\n        NavigationProp<ParamListBase, string, State, ScreenOptions, EventMap> &\n          ActionHelpers,\n        RouteProp<ParamListBase>\n      >\n    >\n  >((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n\n    const optionsList = [\n      // The default `screenOptions` passed to the navigator\n      screenOptions,\n      // The `screenOptions` props passed to `Group` elements\n      ...((config.options\n        ? config.options.filter(Boolean)\n        : []) as ScreenOptionsOrCallback<ScreenOptions>[]),\n      // The `options` prop passed to `Screen` elements,\n      screen.options,\n      // The options set via `navigation.setOptions`\n      options[route.key],\n    ];\n\n    const customOptions = optionsList.reduce<ScreenOptions>(\n      (acc, curr) =>\n        Object.assign(\n          acc,\n          typeof curr !== 'function' ? curr : curr({ route, navigation })\n        ),\n      {} as ScreenOptions\n    );\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: customOptions,\n          })\n        : defaultScreenOptions),\n      ...customOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}