{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";var _excluded=[\"children\",\"screenListeners\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{CommonActions}from'@react-navigation/routers';import*as React from'react';import{isValidElementType}from'react-is';import Group from\"./Group\";import isArrayEqual from\"./isArrayEqual\";import isRecordEqual from\"./isRecordEqual\";import NavigationHelpersContext from\"./NavigationHelpersContext\";import NavigationRouteContext from\"./NavigationRouteContext\";import NavigationStateContext from\"./NavigationStateContext\";import Screen from\"./Screen\";import{PrivateValueStore}from\"./types\";import useChildListeners from\"./useChildListeners\";import useComponent from\"./useComponent\";import useCurrentRender from\"./useCurrentRender\";import useDescriptors from\"./useDescriptors\";import useEventEmitter from\"./useEventEmitter\";import useFocusedListenersChildrenAdapter from\"./useFocusedListenersChildrenAdapter\";import useFocusEvents from\"./useFocusEvents\";import useKeyedChildListeners from\"./useKeyedChildListeners\";import useNavigationHelpers from\"./useNavigationHelpers\";import useOnAction from\"./useOnAction\";import useOnGetState from\"./useOnGetState\";import useOnRouteFocus from\"./useOnRouteFocus\";import useRegisterNavigator from\"./useRegisterNavigator\";import useScheduleUpdate from\"./useScheduleUpdate\";PrivateValueStore;var isValidKey=function isValidKey(key){return key===undefined||typeof key==='string'&&key!=='';};var getRouteConfigsFromChildren=function getRouteConfigsFromChildren(children,groupKey,groupOptions){var configs=React.Children.toArray(children).reduce(function(acc,child){var _child$type,_child$props;if(React.isValidElement(child)){if(child.type===Screen){if(!isValidKey(child.props.navigationKey)){throw new Error(\"Got an invalid 'navigationKey' prop (\"+JSON.stringify(child.props.navigationKey)+\") for the screen '\"+child.props.name+\"'. It must be a non-empty string or 'undefined'.\");}acc.push({keys:[groupKey,child.props.navigationKey],options:groupOptions,props:child.props});return acc;}if(child.type===React.Fragment||child.type===Group){if(!isValidKey(child.props.navigationKey)){throw new Error(\"Got an invalid 'navigationKey' prop (\"+JSON.stringify(child.props.navigationKey)+\") for the group. It must be a non-empty string or 'undefined'.\");}acc.push.apply(acc,_toConsumableArray(getRouteConfigsFromChildren(child.props.children,child.props.navigationKey,child.type!==Group?groupOptions:groupOptions!=null?[].concat(_toConsumableArray(groupOptions),[child.props.screenOptions]):[child.props.screenOptions])));return acc;}}throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \"+(React.isValidElement(child)?\"'\"+(typeof child.type==='string'?child.type:(_child$type=child.type)===null||_child$type===void 0?void 0:_child$type.name)+\"'\"+((_child$props=child.props)!==null&&_child$props!==void 0&&_child$props.name?\" for the screen '\"+child.props.name+\"'\":''):typeof child==='object'?JSON.stringify(child):\"'\"+String(child)+\"'\")+\"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");},[]);if(process.env.NODE_ENV!=='production'){configs.forEach(function(config){var _config$props=config.props,name=_config$props.name,children=_config$props.children,component=_config$props.component,getComponent=_config$props.getComponent;if(typeof name!=='string'||!name){throw new Error(\"Got an invalid name (\"+JSON.stringify(name)+\") for the screen. It must be a non-empty string.\");}if(children!=null||component!==undefined||getComponent!==undefined){if(children!=null&&component!==undefined){throw new Error(\"Got both 'component' and 'children' props for the screen '\"+name+\"'. You must pass only one of them.\");}if(children!=null&&getComponent!==undefined){throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\"+name+\"'. You must pass only one of them.\");}if(component!==undefined&&getComponent!==undefined){throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\"+name+\"'. You must pass only one of them.\");}if(children!=null&&typeof children!=='function'){throw new Error(\"Got an invalid value for 'children' prop for the screen '\"+name+\"'. It must be a function returning a React Element.\");}if(component!==undefined&&!isValidElementType(component)){throw new Error(\"Got an invalid value for 'component' prop for the screen '\"+name+\"'. It must be a valid React Component.\");}if(getComponent!==undefined&&typeof getComponent!=='function'){throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\"+name+\"'. It must be a function returning a React Component.\");}if(typeof component==='function'){if(component.name==='component'){console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\"+name+\"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");}else if(/^[a-z]/.test(component.name)){console.warn(\"Got a component with the name '\"+component.name+\"' for the screen '\"+name+\"'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.\");}}}else{throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\"+name+\"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");}});}return configs;};export default function useNavigationBuilder(createRouter,options){var navigatorKey=useRegisterNavigator();var route=React.useContext(NavigationRouteContext);var children=options.children,screenListeners=options.screenListeners,rest=_objectWithoutProperties(options,_excluded);var _React$useRef=React.useRef(createRouter(_objectSpread(_objectSpread({},rest),route!==null&&route!==void 0&&route.params&&route.params.state==null&&route.params.initial!==false&&typeof route.params.screen==='string'?{initialRouteName:route.params.screen}:null))),router=_React$useRef.current;var routeConfigs=getRouteConfigsFromChildren(children);var screens=routeConfigs.reduce(function(acc,config){if(config.props.name in acc){throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\"+config.props.name+\"')\");}acc[config.props.name]=config;return acc;},{});var routeNames=routeConfigs.map(function(config){return config.props.name;});var routeKeyList=routeNames.reduce(function(acc,curr){acc[curr]=screens[curr].keys.map(function(key){return key!==null&&key!==void 0?key:'';}).join(':');return acc;},{});var routeParamList=routeNames.reduce(function(acc,curr){var initialParams=screens[curr].props.initialParams;acc[curr]=initialParams;return acc;},{});var routeGetIdList=routeNames.reduce(function(acc,curr){return Object.assign(acc,_defineProperty({},curr,screens[curr].props.getId));},{});if(!routeNames.length){throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");}var isStateValid=React.useCallback(function(state){return state.type===undefined||state.type===router.type;},[router.type]);var isStateInitialized=React.useCallback(function(state){return state!==undefined&&state.stale===false&&isStateValid(state);},[isStateValid]);var _React$useContext=React.useContext(NavigationStateContext),currentState=_React$useContext.state,getCurrentState=_React$useContext.getState,setCurrentState=_React$useContext.setState,setKey=_React$useContext.setKey,getKey=_React$useContext.getKey,getIsInitial=_React$useContext.getIsInitial;var stateCleanedUp=React.useRef(false);var cleanUpState=React.useCallback(function(){setCurrentState(undefined);stateCleanedUp.current=true;},[setCurrentState]);var setState=React.useCallback(function(state){if(stateCleanedUp.current){return;}setCurrentState(state);},[setCurrentState]);var _React$useMemo=React.useMemo(function(){var _route$params4;var initialRouteParamList=routeNames.reduce(function(acc,curr){var _route$params,_route$params2,_route$params3;var initialParams=screens[curr].props.initialParams;var initialParamsFromParams=(route===null||route===void 0?void 0:(_route$params=route.params)===null||_route$params===void 0?void 0:_route$params.state)==null&&(route===null||route===void 0?void 0:(_route$params2=route.params)===null||_route$params2===void 0?void 0:_route$params2.initial)!==false&&(route===null||route===void 0?void 0:(_route$params3=route.params)===null||_route$params3===void 0?void 0:_route$params3.screen)===curr?route.params.params:undefined;acc[curr]=initialParams!==undefined||initialParamsFromParams!==undefined?_objectSpread(_objectSpread({},initialParams),initialParamsFromParams):undefined;return acc;},{});if((currentState===undefined||!isStateValid(currentState))&&(route===null||route===void 0?void 0:(_route$params4=route.params)===null||_route$params4===void 0?void 0:_route$params4.state)==null){return[router.getInitialState({routeNames:routeNames,routeParamList:initialRouteParamList,routeGetIdList:routeGetIdList}),true];}else{var _route$params$state,_route$params5;return[router.getRehydratedState((_route$params$state=route===null||route===void 0?void 0:(_route$params5=route.params)===null||_route$params5===void 0?void 0:_route$params5.state)!==null&&_route$params$state!==void 0?_route$params$state:currentState,{routeNames:routeNames,routeParamList:initialRouteParamList,routeGetIdList:routeGetIdList}),false];}},[currentState,router,isStateValid]),_React$useMemo2=_slicedToArray(_React$useMemo,2),initializedState=_React$useMemo2[0],isFirstStateInitialization=_React$useMemo2[1];var previousRouteKeyListRef=React.useRef(routeKeyList);React.useEffect(function(){previousRouteKeyListRef.current=routeKeyList;});var previousRouteKeyList=previousRouteKeyListRef.current;var state=isStateInitialized(currentState)?currentState:initializedState;var nextState=state;if(!isArrayEqual(state.routeNames,routeNames)||!isRecordEqual(routeKeyList,previousRouteKeyList)){nextState=router.getStateForRouteNamesChange(state,{routeNames:routeNames,routeParamList:routeParamList,routeGetIdList:routeGetIdList,routeKeyChanges:Object.keys(routeKeyList).filter(function(name){return previousRouteKeyList.hasOwnProperty(name)&&routeKeyList[name]!==previousRouteKeyList[name];})});}var previousNestedParamsRef=React.useRef(route===null||route===void 0?void 0:route.params);React.useEffect(function(){previousNestedParamsRef.current=route===null||route===void 0?void 0:route.params;},[route===null||route===void 0?void 0:route.params]);if(route!==null&&route!==void 0&&route.params){var previousParams=previousNestedParamsRef.current;var action;if(typeof route.params.state==='object'&&route.params.state!=null&&route.params!==previousParams){action=CommonActions.reset(route.params.state);}else if(typeof route.params.screen==='string'&&(route.params.initial===false&&isFirstStateInitialization||route.params!==previousParams)){action=CommonActions.navigate({name:route.params.screen,params:route.params.params,path:route.params.path});}var updatedState=action?router.getStateForAction(nextState,action,{routeNames:routeNames,routeParamList:routeParamList,routeGetIdList:routeGetIdList}):null;nextState=updatedState!==null?router.getRehydratedState(updatedState,{routeNames:routeNames,routeParamList:routeParamList,routeGetIdList:routeGetIdList}):nextState;}var shouldUpdate=state!==nextState;useScheduleUpdate(function(){if(shouldUpdate){setState(nextState);}});state=nextState;React.useEffect(function(){setKey(navigatorKey);if(!getIsInitial()){setState(nextState);}return function(){setTimeout(function(){if(getCurrentState()!==undefined&&getKey()===navigatorKey){cleanUpState();}},0);};},[]);var initializedStateRef=React.useRef();initializedStateRef.current=initializedState;var getState=React.useCallback(function(){var currentState=getCurrentState();return isStateInitialized(currentState)?currentState:initializedStateRef.current;},[getCurrentState,isStateInitialized]);var emitter=useEventEmitter(function(e){var _ref;var routeNames=[];var route;if(e.target){var _route;route=state.routes.find(function(route){return route.key===e.target;});if((_route=route)!==null&&_route!==void 0&&_route.name){routeNames.push(route.name);}}else{route=state.routes[state.index];routeNames.push.apply(routeNames,_toConsumableArray(Object.keys(screens).filter(function(name){var _route2;return((_route2=route)===null||_route2===void 0?void 0:_route2.name)===name;})));}if(route==null){return;}var navigation=descriptors[route.key].navigation;var listeners=(_ref=[]).concat.apply(_ref,_toConsumableArray([screenListeners].concat(_toConsumableArray(routeNames.map(function(name){var listeners=screens[name].props.listeners;return listeners;}))).map(function(listeners){var map=typeof listeners==='function'?listeners({route:route,navigation:navigation}):listeners;return map?Object.keys(map).filter(function(type){return type===e.type;}).map(function(type){return map===null||map===void 0?void 0:map[type];}):undefined;}))).filter(function(cb,i,self){return cb&&self.lastIndexOf(cb)===i;});listeners.forEach(function(listener){return listener===null||listener===void 0?void 0:listener(e);});});useFocusEvents({state:state,emitter:emitter});React.useEffect(function(){emitter.emit({type:'state',data:{state:state}});},[emitter,state]);var _useChildListeners=useChildListeners(),childListeners=_useChildListeners.listeners,addListener=_useChildListeners.addListener;var _useKeyedChildListene=useKeyedChildListeners(),keyedListeners=_useKeyedChildListene.keyedListeners,addKeyedListener=_useKeyedChildListene.addKeyedListener;var onAction=useOnAction({router:router,getState:getState,setState:setState,key:route===null||route===void 0?void 0:route.key,actionListeners:childListeners.action,beforeRemoveListeners:keyedListeners.beforeRemove,routerConfigOptions:{routeNames:routeNames,routeParamList:routeParamList,routeGetIdList:routeGetIdList},emitter:emitter});var onRouteFocus=useOnRouteFocus({router:router,key:route===null||route===void 0?void 0:route.key,getState:getState,setState:setState});var navigation=useNavigationHelpers({onAction:onAction,getState:getState,emitter:emitter,router:router});useFocusedListenersChildrenAdapter({navigation:navigation,focusedListeners:childListeners.focus});useOnGetState({getState:getState,getStateListeners:keyedListeners.getState});var descriptors=useDescriptors({state:state,screens:screens,navigation:navigation,screenOptions:options.screenOptions,defaultScreenOptions:options.defaultScreenOptions,onAction:onAction,getState:getState,setState:setState,onRouteFocus:onRouteFocus,addListener:addListener,addKeyedListener:addKeyedListener,router:router,emitter:emitter});useCurrentRender({state:state,navigation:navigation,descriptors:descriptors});var NavigationContent=useComponent(NavigationHelpersContext.Provider,{value:navigation});return{state:state,navigation:navigation,descriptors:descriptors,NavigationContent:NavigationContent};}","map":{"version":3,"mappings":"olCAAA,OACEA,aADF,KAWO,2BAXP,CAYA,MAAO,GAAKC,MAAZ,KAAuB,OAAvB,CACA,OAASC,kBAAT,KAAmC,UAAnC,CAEA,MAAOC,MAAP,eACA,MAAOC,aAAP,sBACA,MAAOC,cAAP,uBACA,MAAOC,yBAAP,kCACA,MAAOC,uBAAP,gCACA,MAAOC,uBAAP,gCACA,MAAOC,OAAP,gBACA,OAKEC,iBALF,eAQA,MAAOC,kBAAP,2BACA,MAAOC,aAAP,sBACA,MAAOC,iBAAP,0BACA,MAAOC,eAAP,wBACA,MAAOC,gBAAP,yBACA,MAAOC,mCAAP,4CACA,MAAOC,eAAP,wBACA,MAAOC,uBAAP,gCACA,MAAOC,qBAAP,8BACA,MAAOC,YAAP,qBACA,MAAOC,cAAP,uBACA,MAAOC,gBAAP,yBACA,MAAOC,qBAAP,8BACA,MAAOC,kBAAP,2BAIAd,iBAAiB,CAOjB,GAAMe,WAAU,CAAIC,QAAdD,WAAU,CAAIC,GAAD,QACjBA,IAAG,GAAKC,SAAR,EAAsB,MAAOD,IAAP,GAAe,QAAf,EAA2BA,GAAG,GAAK,EAD3D,GAQA,GAAME,4BAA2B,CAAG,QAA9BA,4BAA2B,CAK/BC,QALkC,CAMlCC,QANkC,CAOlCC,YAPkC,CAY/B,CACH,GAAMC,QAAO,CAAG/B,KAAK,CAACgC,QAAN,CAAeC,OAAf,CAAuBL,QAAvB,EAAiCM,MAAjC,CAEd,SAACC,GAAD,CAAMC,KAAN,CAAgB,8BAChB,GAAIpC,KAAK,CAACqC,cAAN,CAAqBD,KAArB,CAAJ,CAAiC,CAC/B,GAAIA,KAAK,CAACE,IAAN,GAAe9B,MAAnB,CAA2B,CAIzB,GAAI,CAACgB,UAAU,CAACY,KAAK,CAACG,KAAN,CAAYC,aAAb,CAAf,CAA4C,CAC1C,KAAM,IAAIC,MAAJ,yCACoCC,IAAI,CAACC,SAAL,CACtCP,KAAK,CAACG,KAAN,CAAYC,aAD0B,CAEtC,sBACAJ,KAAK,CAACG,KAAN,CAAYK,IACb,oDALH,CAOD,CAEDT,GAAG,CAACU,IAAJ,CAAS,CACPC,IAAI,CAAE,CAACjB,QAAD,CAAWO,KAAK,CAACG,KAAN,CAAYC,aAAvB,CADC,CAEPO,OAAO,CAAEjB,YAFF,CAGPS,KAAK,CAAEH,KAAK,CAACG,KAHN,CAAT,EAWA,MAAOJ,IAAP,CACD,CAED,GAAIC,KAAK,CAACE,IAAN,GAAetC,KAAK,CAACgD,QAArB,EAAiCZ,KAAK,CAACE,IAAN,GAAepC,KAApD,CAA2D,CACzD,GAAI,CAACsB,UAAU,CAACY,KAAK,CAACG,KAAN,CAAYC,aAAb,CAAf,CAA4C,CAC1C,KAAM,IAAIC,MAAJ,yCACoCC,IAAI,CAACC,SAAL,CACtCP,KAAK,CAACG,KAAN,CAAYC,aAD0B,CAEtC,kEAHJ,CAKD,CAIDL,GAAG,CAACU,IAAJ,UAAG,oBACElB,2BAA2B,CAC5BS,KAAK,CAACG,KAAN,CAAYX,QADgB,CAE5BQ,KAAK,CAACG,KAAN,CAAYC,aAFgB,CAG5BJ,KAAK,CAACE,IAAN,GAAepC,KAAf,CACI4B,YADJ,CAEIA,YAAY,EAAI,IAAhB,8BACIA,YAAJ,GAAkBM,KAAK,CAACG,KAAN,CAAYU,aAA9B,GACA,CAACb,KAAK,CAACG,KAAN,CAAYU,aAAb,CAPwB,CADhC,GAWA,MAAOd,IAAP,CACD,CACF,CAED,KAAM,IAAIM,MAAJ,sGAEFzC,KAAK,CAACqC,cAAN,CAAqBD,KAArB,OAEM,MAAOA,MAAK,CAACE,IAAb,GAAsB,QAAtB,CAAiCF,KAAK,CAACE,IAAvC,cAA8CF,KAAK,CAACE,IAApD,sCAA8CY,YAAYN,IAC3D,OACC,mBAAK,CAACL,KAAN,8CAAaK,IAAb,qBAAwCR,KAAK,CAACG,KAAN,CAAYK,IAAK,KAAK,EAC/D,EACD,MAAOR,MAAP,GAAiB,QAAjB,CACAM,IAAI,CAACC,SAAL,CAAeP,KAAf,CADA,KAEIe,MAAM,CAACf,KAAD,CAAQ,IACvB,+FAXH,CAaD,CAvEe,CAuEb,EAvEa,CAAhB,CAyEA,GAAIgB,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzCvB,OAAO,CAACwB,OAAR,CAAiBC,eAAD,CAAY,CAC1B,kBAAoDA,MAAM,CAACjB,KAA3D,CAAQK,IAAF,eAAEA,IAAF,CAAQhB,QAAR,eAAQA,QAAR,CAAkB6B,SAAlB,eAAkBA,SAAlB,CAA6BC,wCAEnC,GAAI,MAAOd,KAAP,GAAgB,QAAhB,EAA4B,CAACA,IAAjC,CAAuC,CACrC,KAAM,IAAIH,MAAJ,yBACoBC,IAAI,CAACC,SAAL,CACtBC,IADsB,CAEtB,oDAHJ,CAKD,CAED,GACEhB,QAAQ,EAAI,IAAZ,EACA6B,SAAS,GAAK/B,SADd,EAEAgC,YAAY,GAAKhC,SAHnB,CAIE,CACA,GAAIE,QAAQ,EAAI,IAAZ,EAAoB6B,SAAS,GAAK/B,SAAtC,CAAiD,CAC/C,KAAM,IAAIe,MAAJ,8DACyDG,IAAK,sCADpE,CAGD,CAED,GAAIhB,QAAQ,EAAI,IAAZ,EAAoB8B,YAAY,GAAKhC,SAAzC,CAAoD,CAClD,KAAM,IAAIe,MAAJ,iEAC4DG,IAAK,sCADvE,CAGD,CAED,GAAIa,SAAS,GAAK/B,SAAd,EAA2BgC,YAAY,GAAKhC,SAAhD,CAA2D,CACzD,KAAM,IAAIe,MAAJ,kEAC6DG,IAAK,sCADxE,CAGD,CAED,GAAIhB,QAAQ,EAAI,IAAZ,EAAoB,MAAOA,SAAP,GAAoB,UAA5C,CAAwD,CACtD,KAAM,IAAIa,MAAJ,6DACwDG,IAAK,uDADnE,CAGD,CAED,GAAIa,SAAS,GAAK/B,SAAd,EAA2B,CAACzB,kBAAkB,CAACwD,SAAD,CAAlD,CAA+D,CAC7D,KAAM,IAAIhB,MAAJ,8DACyDG,IAAK,0CADpE,CAGD,CAED,GAAIc,YAAY,GAAKhC,SAAjB,EAA8B,MAAOgC,aAAP,GAAwB,UAA1D,CAAsE,CACpE,KAAM,IAAIjB,MAAJ,iEAC4DG,IAAK,yDADvE,CAGD,CAED,GAAI,MAAOa,UAAP,GAAqB,UAAzB,CAAqC,CACnC,GAAIA,SAAS,CAACb,IAAV,GAAmB,WAAvB,CAAoC,CAIlCe,OAAO,CAACC,IAAR,sFACuFhB,IAAK,yRAD5F,CAGD,CAPD,IAOO,IAAI,SAASiB,IAAT,CAAcJ,SAAS,CAACb,IAAxB,CAAJ,CAAmC,CACxCe,OAAO,CAACC,IAAR,mCACoCH,SAAS,CAACb,IAAK,sBAAoBA,IAAK,2MAD5E,CAGD,CACF,CACF,CAvDD,IAuDO,CACL,KAAM,IAAIH,MAAJ,mFAC8EG,IAAK,uLADzF,CAGD,CACF,CAvED,EAwED,CAED,MAAOb,QAAP,CACD,CAlKD,CA2KA,cAAe,SAAS+B,qBAAT,CAObC,YAPa,CAQbhB,OARa,CAeb,CACA,GAAMiB,aAAY,CAAG1C,oBAAoB,EAAzC,CAEA,GAAM2C,MAAK,CAAGjE,KAAK,CAACkE,UAAN,CAAiB5D,sBAAjB,CAAd,CAIA,GAAQsB,SAAF,CAAyCmB,OAA/C,CAAQnB,QAAF,CAAYuC,eAAZ,CAAyCpB,OAA/C,CAAkBoB,eAAZ,CAAgCC,8BAASrB,OAA/C,YACA,kBAA4B/C,KAAK,CAACqE,MAAN,CAC1BN,YAAY,gCACNK,IADO,EAEPH,KAAK,OAAL,OAAK,SAAL,OAAK,CAAEK,MAAP,EACJL,KAAK,CAACK,MAAN,CAAaC,KAAb,EAAsB,IADlB,EAEJN,KAAK,CAACK,MAAN,CAAaE,OAAb,GAAyB,KAFrB,EAGJ,MAAOP,MAAK,CAACK,MAAN,CAAaG,MAApB,GAA+B,QAH3B,CAIA,CAAEC,gBAAgB,CAAET,KAAK,CAACK,MAAN,CAAaG,MAAjC,CAJA,CAKA,IALJ,EAHwB,CAA5B,CAAiBE,qBAATC,OAAO,CAYf,GAAMC,aAAY,CAAGlD,2BAA2B,CAI9CC,QAJ8C,CAAhD,CAMA,GAAMkD,QAAO,CAAGD,YAAY,CAAC3C,MAAb,CAEd,SAACC,GAAD,CAAMqB,MAAN,CAAiB,CACjB,GAAIA,MAAM,CAACjB,KAAP,CAAaK,IAAb,GAAqBT,IAAzB,CAA8B,CAC5B,KAAM,IAAIM,MAAJ,8GACyGe,MAAM,CAACjB,KAAP,CAAaK,IAAK,MADjI,CAGD,CAEDT,GAAG,CAACqB,MAAM,CAACjB,KAAP,CAAaK,IAAd,CAAH,CAAyBY,MAAzB,CACA,MAAOrB,IAAP,CACD,CAXe,CAWb,EAXa,CAAhB,CAaA,GAAM4C,WAAU,CAAGF,YAAY,CAACG,GAAb,CAAkBxB,eAAD,QAAYA,OAAM,CAACjB,KAAP,CAAaK,IAA1C,GAAnB,CACA,GAAMqC,aAAY,CAAGF,UAAU,CAAC7C,MAAX,CACnB,SAACC,GAAD,CAAM+C,IAAN,CAAe,CACb/C,GAAG,CAAC+C,IAAD,CAAH,CAAYJ,OAAO,CAACI,IAAD,CAAP,CAAcpC,IAAd,CAAmBkC,GAAnB,CAAwBvD,YAAD,QAASA,IAAT,SAASA,GAAT,UAASA,GAAT,CAAgB,EAAvC,IAA2C0D,IAA3C,CAAgD,GAAhD,CAAZ,CACA,MAAOhD,IAAP,CACD,CAJkB,CAKnB,EALmB,CAArB,CAOA,GAAMiD,eAAc,CAAGL,UAAU,CAAC7C,MAAX,CACrB,SAACC,GAAD,CAAM+C,IAAN,CAAe,CACb,GAAQG,eAAkBP,OAAO,CAACI,IAAD,CAAP,CAAc3C,KAAxC,CAAQ8C,cACRlD,GAAG,CAAC+C,IAAD,CAAH,CAAYG,aAAZ,CACA,MAAOlD,IAAP,CACD,CALoB,CAMrB,EANqB,CAAvB,CAQA,GAAMmD,eAAc,CAAGP,UAAU,CAAC7C,MAAX,CAGrB,SAACC,GAAD,CAAM+C,IAAN,QACEK,OAAM,CAACC,MAAP,CAAcrD,GAAd,oBACG+C,IAAD,CAAQJ,OAAO,CAACI,IAAD,CAAP,CAAc3C,KAAd,CAAoBkD,OALX,GAOrB,EAPqB,CAAvB,CAUA,GAAI,CAACV,UAAU,CAACW,MAAhB,CAAwB,CACtB,KAAM,IAAIjD,MAAJ,CACJ,4FADI,CAAN,CAGD,CAED,GAAMkD,aAAY,CAAG3F,KAAK,CAAC4F,WAAN,CAClBrB,cAAD,QAAWA,MAAK,CAACjC,IAAN,GAAeZ,SAAf,EAA4B6C,KAAK,CAACjC,IAAN,GAAeqC,MAAM,CAACrC,IAD1C,GAEnB,CAACqC,MAAM,CAACrC,IAAR,CAFmB,CAArB,CAKA,GAAMuD,mBAAkB,CAAG7F,KAAK,CAAC4F,WAAN,CACxBrB,cAAD,QACEA,MAAK,GAAK7C,SAAV,EAAuB6C,KAAK,CAACuB,KAAN,GAAgB,KAAvC,EAAgDH,YAAY,CAACpB,KAAD,CAFrC,GAGzB,CAACoB,YAAD,CAHyB,CAA3B,CAMA,sBAOI3F,KAAK,CAACkE,UAAN,CAAiB3D,sBAAjB,CAPJ,CACSwF,YADH,mBACJxB,KAAK,CACKyB,eAFN,mBAEJC,QAAQ,CACEC,eAHN,mBAGJC,QAAQ,CACRC,MAJI,mBAIJA,MAJI,CAKJC,MALI,mBAKJA,MALI,CAMJC,4CAGF,GAAMC,eAAc,CAAGvG,KAAK,CAACqE,MAAN,CAAa,KAAb,CAAvB,CAEA,GAAMmC,aAAY,CAAGxG,KAAK,CAAC4F,WAAN,CAAkB,UAAM,CAC3CM,eAAe,CAACxE,SAAD,CAAf,CACA6E,cAAc,CAAC3B,OAAf,CAAyB,IAAzB,CACD,CAHoB,CAGlB,CAACsB,eAAD,CAHkB,CAArB,CAKA,GAAMC,SAAQ,CAAGnG,KAAK,CAAC4F,WAAN,CACdrB,cAAD,CAAwE,CACtE,GAAIgC,cAAc,CAAC3B,OAAnB,CAA4B,CAI1B,OACD,CACDsB,eAAe,CAAC3B,KAAD,CAAf,CACD,CATc,CAUf,CAAC2B,eAAD,CAVe,CAAjB,CAaA,mBAAuDlG,KAAK,CAACyG,OAAN,CAAc,UAAM,oBACzE,GAAMC,sBAAqB,CAAG3B,UAAU,CAAC7C,MAAX,CAE5B,SAACC,GAAD,CAAM+C,IAAN,CAAe,iDACf,GAAQG,eAAkBP,OAAO,CAACI,IAAD,CAAP,CAAc3C,KAAxC,CAAQ8C,cACR,GAAMsB,wBAAuB,CAC3B,MAAK,OAAL,OAAK,SAAL,4BAAK,CAAErC,MAAP,sDAAeC,KAAf,GAAwB,IAAxB,EACA,MAAK,OAAL,OAAK,SAAL,6BAAK,CAAED,MAAP,wDAAeE,OAAf,IAA2B,KAD3B,EAEA,MAAK,OAAL,OAAK,SAAL,6BAAK,CAAEF,MAAP,wDAAeG,MAAf,IAA0BS,IAF1B,CAGIjB,KAAK,CAACK,MAAN,CAAaA,MAHjB,CAII5C,SALN,CAOAS,GAAG,CAAC+C,IAAD,CAAH,CACEG,aAAa,GAAK3D,SAAlB,EAA+BiF,uBAAuB,GAAKjF,SAA3D,gCAES2D,aADL,EAEKsB,yBAELjF,SANN,CAQA,MAAOS,IAAP,CACD,CApB6B,CAoB3B,EApB2B,CAA9B,CA0BA,GACE,CAAC4D,YAAY,GAAKrE,SAAjB,EAA8B,CAACiE,YAAY,CAACI,YAAD,CAA5C,GACA,MAAK,OAAL,OAAK,SAAL,6BAAK,CAAEzB,MAAP,wDAAeC,KAAf,GAAwB,IAF1B,CAGE,CACA,MAAO,CACLI,MAAM,CAACiC,eAAP,CAAuB,CACrB7B,UADqB,CACrBA,UADqB,CAErBK,cAAc,CAAEsB,qBAFK,CAGrBpB,6BAHqB,CAAvB,CADK,CAML,IANK,CAAP,CAQD,CAZD,IAYO,wCACL,MAAO,CACLX,MAAM,CAACkC,kBAAP,sBACE5C,KADF,SACEA,KADF,iCACEA,KAAK,CAAEK,MADT,yCACEwC,eAAevC,KADjB,2DAC2BwB,YAD3B,CAEE,CACEhB,UADF,CACEA,UADF,CAEEK,cAAc,CAAEsB,qBAFlB,CAGEpB,6BAHF,CAFF,CADK,CASL,KATK,CAAP,CAWD,CAOF,CA1DsD,CA0DpD,CAACS,YAAD,CAAepB,MAAf,CAAuBgB,YAAvB,CA1DoD,CAAvD,kDAAOoB,gBAAD,oBAAmBC,0BAAnB,oBA4DN,GAAMC,wBAAuB,CAAGjH,KAAK,CAACqE,MAAN,CAAaY,YAAb,CAAhC,CAEAjF,KAAK,CAACkH,SAAN,CAAgB,UAAM,CACpBD,uBAAuB,CAACrC,OAAxB,CAAkCK,YAAlC,CACD,CAFD,EAIA,GAAMkC,qBAAoB,CAAGF,uBAAuB,CAACrC,OAArD,CAEA,GAAIL,MAAK,CAIPsB,kBAAkB,CAACE,YAAD,CAAlB,CACKA,YADL,CAEKgB,gBANP,CAQA,GAAIK,UAAgB,CAAG7C,KAAvB,CAEA,GACE,CAACpE,YAAY,CAACoE,KAAK,CAACQ,UAAP,CAAmBA,UAAnB,CAAb,EACA,CAAC3E,aAAa,CAAC6E,YAAD,CAAekC,oBAAf,CAFhB,CAGE,CAEAC,SAAS,CAAGzC,MAAM,CAAC0C,2BAAP,CAAmC9C,KAAnC,CAA0C,CACpDQ,UADoD,CACpDA,UADoD,CAEpDK,cAFoD,CAEpDA,cAFoD,CAGpDE,cAHoD,CAGpDA,cAHoD,CAIpDgC,eAAe,CAAE/B,MAAM,CAACzC,IAAP,CAAYmC,YAAZ,EAA0BsC,MAA1B,CACd3E,aAAD,QACEuE,qBAAoB,CAACK,cAArB,CAAoC5E,IAApC,GACAqC,YAAY,CAACrC,IAAD,CAAZ,GAAuBuE,oBAAoB,CAACvE,IAAD,CAH9B,GAJmC,CAA1C,CAAZ,CAUD,CAED,GAAM6E,wBAAuB,CAAGzH,KAAK,CAACqE,MAAN,CAAaJ,KAAb,SAAaA,KAAb,iBAAaA,KAAK,CAAEK,MAApB,CAAhC,CAEAtE,KAAK,CAACkH,SAAN,CAAgB,UAAM,CACpBO,uBAAuB,CAAC7C,OAAxB,CAAkCX,KAAlC,SAAkCA,KAAlC,iBAAkCA,KAAK,CAAEK,MAAzC,CACD,CAFD,CAEG,CAACL,KAAD,SAACA,KAAD,iBAACA,KAAK,CAAEK,MAAR,CAFH,EAIA,GAAIL,KAAJ,SAAIA,KAAJ,WAAIA,KAAK,CAAEK,MAAX,CAAmB,CACjB,GAAMoD,eAAc,CAAGD,uBAAuB,CAAC7C,OAA/C,CAEA,GAAI+C,OAAJ,CAEA,GACE,MAAO1D,MAAK,CAACK,MAAN,CAAaC,KAApB,GAA8B,QAA9B,EACAN,KAAK,CAACK,MAAN,CAAaC,KAAb,EAAsB,IADtB,EAEAN,KAAK,CAACK,MAAN,GAAiBoD,cAHnB,CAIE,CAEAC,MAAM,CAAG5H,aAAa,CAAC6H,KAAd,CAAoB3D,KAAK,CAACK,MAAN,CAAaC,KAAjC,CAAT,CACD,CAPD,IAOO,IACL,MAAON,MAAK,CAACK,MAAN,CAAaG,MAApB,GAA+B,QAA/B,GACER,KAAK,CAACK,MAAN,CAAaE,OAAb,GAAyB,KAAzB,EAAkCwC,0BAAnC,EACC/C,KAAK,CAACK,MAAN,GAAiBoD,cAFnB,CADK,CAIL,CAEAC,MAAM,CAAG5H,aAAa,CAAC8H,QAAd,CAAuB,CAC9BjF,IAAI,CAAEqB,KAAK,CAACK,MAAN,CAAaG,MADW,CAE9BH,MAAM,CAAEL,KAAK,CAACK,MAAN,CAAaA,MAFS,CAG9BwD,IAAI,CAAE7D,KAAK,CAACK,MAAN,CAAawD,IAHW,CAAvB,CAAT,CAKD,CAGD,GAAMC,aAAY,CAAGJ,MAAM,CACvBhD,MAAM,CAACqD,iBAAP,CAAyBZ,SAAzB,CAAoCO,MAApC,CAA4C,CAC1C5C,UAD0C,CAC1CA,UAD0C,CAE1CK,cAF0C,CAE1CA,cAF0C,CAG1CE,6BAH0C,CAA5C,CADuB,CAMvB,IANJ,CAQA8B,SAAS,CACPW,YAAY,GAAK,IAAjB,CACIpD,MAAM,CAACkC,kBAAP,CAA0BkB,YAA1B,CAAwC,CACtChD,UADsC,CACtCA,UADsC,CAEtCK,cAFsC,CAEtCA,cAFsC,CAGtCE,6BAHsC,CAAxC,CADJ,CAMI8B,SAPN,CAQD,CAED,GAAMa,aAAY,CAAG1D,KAAK,GAAK6C,SAA/B,CAEA7F,iBAAiB,CAAC,UAAM,CACtB,GAAI0G,YAAJ,CAAkB,CAEhB9B,QAAQ,CAACiB,SAAD,CAAR,CACD,CACF,CALgB,CAAjB,CAUA7C,KAAK,CAAG6C,SAAR,CAEApH,KAAK,CAACkH,SAAN,CAAgB,UAAM,CACpBd,MAAM,CAACpC,YAAD,CAAN,CAEA,GAAI,CAACsC,YAAY,EAAjB,CAAqB,CAInBH,QAAQ,CAACiB,SAAD,CAAR,CACD,CAED,MAAO,WAAM,CAKXc,UAAU,CAAC,UAAM,CACf,GAAIlC,eAAe,KAAOtE,SAAtB,EAAmC2E,MAAM,KAAOrC,YAApD,CAAkE,CAChEwC,YAAY,GACb,CACF,CAJS,CAIP,CAJO,CAAV,CAKD,CAVD,CAYD,CAtBD,CAsBG,EAtBH,EA2BA,GAAM2B,oBAAmB,CAAGnI,KAAK,CAACqE,MAAN,EAA5B,CACA8D,mBAAmB,CAACvD,OAApB,CAA8BmC,gBAA9B,CAEA,GAAMd,SAAQ,CAAGjG,KAAK,CAAC4F,WAAN,CAAkB,UAAa,CAC9C,GAAMG,aAAY,CAAGC,eAAe,EAApC,CAEA,MAAOH,mBAAkB,CAACE,YAAD,CAAlB,CACFA,YADE,CAEFoC,mBAAmB,CAACvD,OAFzB,CAGD,CANgB,CAMd,CAACoB,eAAD,CAAkBH,kBAAlB,CANc,CAAjB,CAQA,GAAMuC,QAAO,CAAGtH,eAAe,CAAuBuH,UAAD,CAAO,UAC1D,GAAItD,WAAU,CAAG,EAAjB,CAEA,GAAId,MAAJ,CAEA,GAAIoE,CAAC,CAACC,MAAN,CAAc,YACZrE,KAAK,CAAGM,KAAK,CAACgE,MAAN,CAAaC,IAAb,CAAmBvE,cAAD,QAAWA,MAAK,CAACxC,GAAN,GAAc4G,CAAC,CAACC,MAA7C,GAAR,CAEA,WAAIrE,KAAJ,2BAAIwE,OAAO7F,IAAX,CAAiB,CACfmC,UAAU,CAAClC,IAAX,CAAgBoB,KAAK,CAACrB,IAAtB,EACD,CACF,CAND,IAMO,CACLqB,KAAK,CAAGM,KAAK,CAACgE,MAAN,CAAahE,KAAK,CAACmE,KAAnB,CAAR,CACA3D,UAAU,CAAClC,IAAX,iBAAU,oBACL0C,MAAM,CAACzC,IAAP,CAAYgC,OAAZ,EAAqByC,MAArB,CAA6B3E,aAAD,oBAAU,eAAK,QAAL,kCAAOA,IAAP,IAAgBA,IAA1B,EAA5B,CADL,GAGD,CAED,GAAIqB,KAAK,EAAI,IAAb,CAAmB,CACjB,OACD,CAED,GAAM0E,WAAU,CAAGC,WAAW,CAAC3E,KAAK,CAACxC,GAAP,CAAX,CAAuBkH,UAA1C,CAEA,GAAME,UAAS,CAAI,QAAD,EACfC,MADe,+BAGX,CACD3E,eADC,4BAEEY,UAAU,CAACC,GAAX,CAAgBpC,aAAD,CAAU,CAC1B,GAAQiG,WAAc/D,OAAO,CAAClC,IAAD,CAAP,CAAcL,KAApC,CAAQsG,UACR,MAAOA,UAAP,CACD,CAHE,CAFF,GAMD7D,GANC,CAMI6D,kBAAD,CAAe,CACnB,GAAM7D,IAAG,CACP,MAAO6D,UAAP,GAAqB,UAArB,CACIA,SAAS,CAAC,CAAE5E,KAAK,CAAEA,KAAT,CAAuB0E,qBAAvB,CAAD,CADb,CAEIE,SAHN,CAKA,MAAO7D,IAAG,CACNO,MAAM,CAACzC,IAAP,CAAYkC,GAAZ,EACGuC,MADH,CACWjF,aAAD,QAAUA,KAAI,GAAK+F,CAAC,CAAC/F,IAD/B,IAEG0C,GAFH,CAEQ1C,aAAD,QAAU0C,IAAV,SAAUA,GAAV,iBAAUA,GAAG,CAAG1C,IAAH,CAFpB,GADM,CAINZ,SAJJ,CAKD,CAjBE,CAHW,GAwBf6F,MAxBe,CAwBR,SAACwB,EAAD,CAAKC,CAAL,CAAQC,IAAR,QAAiBF,GAAE,EAAIE,IAAI,CAACC,WAAL,CAAiBH,EAAjB,IAAyBC,CAxBxC,GAAlB,CA0BAH,SAAS,CAACtF,OAAV,CAAmB4F,iBAAD,QAAcA,SAAd,SAAcA,QAAd,iBAAcA,QAAQ,CAAGd,CAAH,CAAxC,IACD,CAnD8B,CAA/B,CAqDArH,cAAc,CAAC,CAAEuD,KAAF,CAAEA,KAAF,CAAS6D,eAAT,CAAD,CAAd,CAEApI,KAAK,CAACkH,SAAN,CAAgB,UAAM,CACpBkB,OAAO,CAACgB,IAAR,CAAa,CAAE9G,IAAI,CAAE,OAAR,CAAiB+G,IAAI,CAAE,CAAE9E,WAAF,CAAvB,CAAb,EACD,CAFD,CAEG,CAAC6D,OAAD,CAAU7D,KAAV,CAFH,EAIA,uBAAmD7D,iBAAiB,EAApE,CAAmB4I,cAAb,oBAAET,SAAS,CAAkBU,2CAEnC,0BAA6CtI,sBAAsB,EAAnE,CAAQuI,cAAF,uBAAEA,cAAF,CAAkBC,wDAExB,GAAMC,SAAQ,CAAGvI,WAAW,CAAC,CAC3BwD,MAD2B,CAC3BA,MAD2B,CAE3BsB,QAF2B,CAE3BA,QAF2B,CAG3BE,QAH2B,CAG3BA,QAH2B,CAI3B1E,GAAG,CAAEwC,KAAF,SAAEA,KAAF,iBAAEA,KAAK,CAAExC,GAJe,CAK3BkI,eAAe,CAAEL,cAAc,CAAC3B,MALL,CAM3BiC,qBAAqB,CAAEJ,cAAc,CAACK,YANX,CAO3BC,mBAAmB,CAAE,CACnB/E,UADmB,CACnBA,UADmB,CAEnBK,cAFmB,CAEnBA,cAFmB,CAGnBE,6BAHmB,CAPM,CAY3B8C,eAZ2B,CAAD,CAA5B,CAeA,GAAM2B,aAAY,CAAG1I,eAAe,CAAC,CACnCsD,MADmC,CACnCA,MADmC,CAEnClD,GAAG,CAAEwC,KAAF,SAAEA,KAAF,iBAAEA,KAAK,CAAExC,GAFuB,CAGnCwE,QAHmC,CAGnCA,QAHmC,CAInCE,iBAJmC,CAAD,CAApC,CAOA,GAAMwC,WAAU,CAAGzH,oBAAoB,CAKrC,CACAwI,QADA,CACAA,QADA,CAEAzD,QAFA,CAEAA,QAFA,CAGAmC,OAHA,CAGAA,OAHA,CAIAzD,aAJA,CALqC,CAAvC,CAYA5D,kCAAkC,CAAC,CACjC4H,UADiC,CACjCA,UADiC,CAEjCqB,gBAAgB,CAAEV,cAAc,CAACW,KAFA,CAAD,CAAlC,CAKA7I,aAAa,CAAC,CACZ6E,QADY,CACZA,QADY,CAEZiE,iBAAiB,CAAEV,cAAc,CAACvD,QAFtB,CAAD,CAAb,CAKA,GAAM2C,YAAW,CAAG/H,cAAc,CAKhC,CACA0D,KADA,CACAA,KADA,CAEAO,OAFA,CAEAA,OAFA,CAGA6D,UAHA,CAGAA,UAHA,CAIA1F,aAAa,CAAEF,OAAO,CAACE,aAJvB,CAKAkH,oBAAoB,CAAEpH,OAAO,CAACoH,oBAL9B,CAMAT,QANA,CAMAA,QANA,CAOAzD,QAPA,CAOAA,QAPA,CAQAE,QARA,CAQAA,QARA,CASA4D,YATA,CASAA,YATA,CAUAR,WAVA,CAUAA,WAVA,CAWAE,gBAXA,CAWAA,gBAXA,CAYA9E,MAZA,CAYAA,MAZA,CAcAyD,eAdA,CALgC,CAAlC,CAsBAxH,gBAAgB,CAAC,CACf2D,KADe,CACfA,KADe,CAEfoE,UAFe,CAEfA,UAFe,CAGfC,uBAHe,CAAD,CAAhB,CAMA,GAAMwB,kBAAiB,CAAGzJ,YAAY,CAACN,wBAAwB,CAACgK,QAA1B,CAAoC,CACxEC,KAAK,CAAE3B,UADiE,CAApC,CAAtC,CAIA,MAAO,CACLpE,KADK,CACLA,KADK,CAELoE,UAFK,CAELA,UAFK,CAGLC,WAHK,CAGLA,WAHK,CAILwB,mCAJK,CAAP,CAMD","names":["CommonActions","React","isValidElementType","Group","isArrayEqual","isRecordEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useKeyedChildListeners","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","Children","toArray","reduce","acc","child","isValidElement","type","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","screenOptions","_child$type","String","process","env","NODE_ENV","forEach","config","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","useRef","params","state","initial","screen","initialRouteName","router","current","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getCurrentState","getState","setCurrentState","setState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","_route$params5","initializedState","isFirstStateInitialization","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","getStateForRouteNamesChange","routeKeyChanges","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","_route","index","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent","Provider","value"],"sources":["useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}