{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";var _excluded=[\"defaultStatus\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{nanoid}from'nanoid/non-secure';import TabRouter,{TabActions}from\"./TabRouter\";export var DrawerActions=_objectSpread(_objectSpread({},TabActions),{},{openDrawer:function openDrawer(){return{type:'OPEN_DRAWER'};},closeDrawer:function closeDrawer(){return{type:'CLOSE_DRAWER'};},toggleDrawer:function toggleDrawer(){return{type:'TOGGLE_DRAWER'};}});export default function DrawerRouter(_ref){var _ref$defaultStatus=_ref.defaultStatus,defaultStatus=_ref$defaultStatus===void 0?'closed':_ref$defaultStatus,rest=_objectWithoutProperties(_ref,_excluded);var router=TabRouter(rest);var isDrawerInHistory=function isDrawerInHistory(state){var _state$history;return Boolean((_state$history=state.history)===null||_state$history===void 0?void 0:_state$history.some(function(it){return it.type==='drawer';}));};var addDrawerToHistory=function addDrawerToHistory(state){if(isDrawerInHistory(state)){return state;}return _objectSpread(_objectSpread({},state),{},{history:[].concat(_toConsumableArray(state.history),[{type:'drawer',status:defaultStatus==='open'?'closed':'open'}])});};var removeDrawerFromHistory=function removeDrawerFromHistory(state){if(!isDrawerInHistory(state)){return state;}return _objectSpread(_objectSpread({},state),{},{history:state.history.filter(function(it){return it.type!=='drawer';})});};var openDrawer=function openDrawer(state){if(defaultStatus==='open'){return removeDrawerFromHistory(state);}return addDrawerToHistory(state);};var closeDrawer=function closeDrawer(state){if(defaultStatus==='open'){return addDrawerToHistory(state);}return removeDrawerFromHistory(state);};return _objectSpread(_objectSpread({},router),{},{type:'drawer',getInitialState:function getInitialState(_ref2){var routeNames=_ref2.routeNames,routeParamList=_ref2.routeParamList,routeGetIdList=_ref2.routeGetIdList;var state=router.getInitialState({routeNames:routeNames,routeParamList:routeParamList,routeGetIdList:routeGetIdList});return _objectSpread(_objectSpread({},state),{},{default:defaultStatus,stale:false,type:'drawer',key:\"drawer-\"+nanoid()});},getRehydratedState:function getRehydratedState(partialState,_ref3){var routeNames=_ref3.routeNames,routeParamList=_ref3.routeParamList,routeGetIdList=_ref3.routeGetIdList;if(partialState.stale===false){return partialState;}var state=router.getRehydratedState(partialState,{routeNames:routeNames,routeParamList:routeParamList,routeGetIdList:routeGetIdList});if(isDrawerInHistory(partialState)){state=removeDrawerFromHistory(state);state=addDrawerToHistory(state);}return _objectSpread(_objectSpread({},state),{},{default:defaultStatus,type:'drawer',key:\"drawer-\"+nanoid()});},getStateForRouteFocus:function getStateForRouteFocus(state,key){var result=router.getStateForRouteFocus(state,key);return closeDrawer(result);},getStateForAction:function getStateForAction(state,action,options){switch(action.type){case'OPEN_DRAWER':return openDrawer(state);case'CLOSE_DRAWER':return closeDrawer(state);case'TOGGLE_DRAWER':if(isDrawerInHistory(state)){return removeDrawerFromHistory(state);}return addDrawerToHistory(state);case'JUMP_TO':case'NAVIGATE':{var result=router.getStateForAction(state,action,options);if(result!=null&&result.index!==state.index){return closeDrawer(result);}return result;}case'GO_BACK':if(isDrawerInHistory(state)){return removeDrawerFromHistory(state);}return router.getStateForAction(state,action,options);default:return router.getStateForAction(state,action,options);}},actionCreators:DrawerActions});}","map":{"version":3,"mappings":"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","names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","defaultStatus","rest","router","isDrawerInHistory","state","Boolean","history","_state$history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","routeNames","routeParamList","routeGetIdList","default","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sources":["DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}