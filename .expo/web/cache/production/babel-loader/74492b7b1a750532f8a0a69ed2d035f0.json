{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"visible\",\"children\",\"style\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";var FAR_FAR_AWAY=30000;export default function ResourceSavingScene(_ref){var visible=_ref.visible,children=_ref.children,style=_ref.style,rest=_objectWithoutProperties(_ref,_excluded);if(Platform.OS==='web'){return React.createElement(View,_extends({hidden:!visible,style:[{display:visible?'flex':'none'},styles.container,style],pointerEvents:visible?'auto':'none'},rest),children);}return React.createElement(View,{style:[styles.container,style],pointerEvents:visible?'auto':'none'},React.createElement(View,{collapsable:false,removeClippedSubviews:Platform.OS==='ios'||Platform.OS==='macos'?!visible:true,pointerEvents:visible?'auto':'none',style:visible?styles.attached:styles.detached},children));}var styles=StyleSheet.create({container:{flex:1,overflow:'hidden'},attached:{flex:1},detached:{flex:1,top:FAR_FAR_AWAY}});","map":{"version":3,"mappings":"yZAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,oLASA,GAAMC,aAAY,CAAG,KAArB,CAEA,cAAe,SAASC,oBAAT,MAKL,IAJRC,QAD0C,CAKlCC,KAJRD,OAD0C,CAE1CE,QAF0C,CAKlCD,KAHRC,QAF0C,CAG1CC,KAH0C,CAKlCF,KAFRE,KAH0C,CAIvCC,8BACKH,gBACR,GAAII,QAAQ,CAACC,EAAT,GAAgB,KAApB,CAA2B,CACzB,MACET,qBAACU,IAAD,WAEEC,MAAM,CAAE,CAACR,OAFX,CAGEG,KAAK,CAAE,CACL,CAAEM,OAAO,CAAET,OAAO,CAAG,MAAH,CAAY,MAA9B,CADK,CAELU,MAAM,CAACC,SAFF,CAGLR,KAHK,CAHT,CAQES,aAAa,CAAEZ,OAAO,CAAG,MAAH,CAAY,MARpC,EASMI,IATN,EAWGF,QAXH,CADF,CAeD,CAED,MACEL,qBAACU,IAAD,EACEJ,KAAK,CAAE,CAACO,MAAM,CAACC,SAAR,CAAmBR,KAAnB,CADT,CAGES,aAAa,CAAEZ,OAAO,CAAG,MAAH,CAAY,MAHpC,EAKEH,oBAACU,IAAD,EACEM,WAAW,CAAE,KADf,CAEEC,qBAAqB,CAGnBT,QAAQ,CAACC,EAAT,GAAgB,KAAhB,EAAyBD,QAAQ,CAACC,EAAT,GAAgB,OAAzC,CAAmD,CAACN,OAApD,CAA8D,IALlE,CAOEY,aAAa,CAAEZ,OAAO,CAAG,MAAH,CAAY,MAPpC,CAQEG,KAAK,CAAEH,OAAO,CAAGU,MAAM,CAACK,QAAV,CAAqBL,MAAM,CAACM,QAR5C,EAUGd,QAVH,CALF,CADF,CAoBD,CAED,GAAMQ,OAAM,CAAGO,UAAU,CAACC,MAAX,CAAkB,CAC/BP,SAAS,CAAE,CACTQ,IAAI,CAAE,CADG,CAETC,QAAQ,CAAE,QAFD,CADoB,CAK/BL,QAAQ,CAAE,CACRI,IAAI,CAAE,CADE,CALqB,CAQ/BH,QAAQ,CAAE,CACRG,IAAI,CAAE,CADE,CAERE,GAAG,CAAEvB,YAFG,CARqB,CAAlB,CAAf","names":["React","FAR_FAR_AWAY","ResourceSavingScene","visible","_ref","children","style","rest","Platform","OS","View","hidden","display","styles","container","pointerEvents","collapsable","removeClippedSubviews","attached","detached","StyleSheet","create","flex","overflow","top"],"sources":["ResourceSavingView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\ntype Props = {\n  visible: boolean;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene({\n  visible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  if (Platform.OS === 'web') {\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!visible}\n        style={[\n          { display: visible ? 'flex' : 'none' },\n          styles.container,\n          style,\n        ]}\n        pointerEvents={visible ? 'auto' : 'none'}\n        {...rest}\n      >\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.container, style]}\n      // box-none doesn't seem to work properly on Android\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <View\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS & macOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' || Platform.OS === 'macos' ? !visible : true\n        }\n        pointerEvents={visible ? 'auto' : 'none'}\n        style={visible ? styles.attached : styles.detached}\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}