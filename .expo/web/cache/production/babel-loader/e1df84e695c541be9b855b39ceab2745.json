{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";var _excluded=[\"emit\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{CommonActions}from'@react-navigation/routers';import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";export default function useNavigationCache(_ref){var state=_ref.state,getState=_ref.getState,navigation=_ref.navigation,_setOptions=_ref.setOptions,router=_ref.router,emitter=_ref.emitter;var _React$useContext=React.useContext(NavigationBuilderContext),stackRef=_React$useContext.stackRef;var cache=React.useMemo(function(){return{current:{}};},[getState,navigation,_setOptions,router,emitter]);var actions=_objectSpread(_objectSpread({},router.actionCreators),CommonActions);cache.current=state.routes.reduce(function(acc,route){var previous=cache.current[route.key];if(previous){acc[route.key]=previous;}else{var emit=navigation.emit,rest=_objectWithoutProperties(navigation,_excluded);var _dispatch=function dispatch(thunk){var action=typeof thunk==='function'?thunk(getState()):thunk;if(action!=null){navigation.dispatch(_objectSpread({source:route.key},action));}};var withStack=function withStack(callback){var isStackSet=false;try{if(process.env.NODE_ENV!=='production'&&stackRef&&!stackRef.current){stackRef.current=new Error().stack;isStackSet=true;}callback();}finally{if(isStackSet&&stackRef){stackRef.current=undefined;}}};var helpers=Object.keys(actions).reduce(function(acc,name){acc[name]=function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return withStack(function(){return _dispatch(actions[name].apply(actions,args));});};return acc;},{});acc[route.key]=_objectSpread(_objectSpread(_objectSpread(_objectSpread({},rest),helpers),emitter.create(route.key)),{},{dispatch:function dispatch(thunk){return withStack(function(){return _dispatch(thunk);});},setOptions:function setOptions(options){return _setOptions(function(o){return _objectSpread(_objectSpread({},o),{},_defineProperty({},route.key,_objectSpread(_objectSpread({},o[route.key]),options)));});},isFocused:function isFocused(){var state=getState();if(state.routes[state.index].key!==route.key){return false;}return navigation?navigation.isFocused():true;}});}return acc;},{});return cache.current;}","map":{"version":3,"sources":["useNavigationCache.tsx"],"names":["CommonActions","React","NavigationBuilderContext","useNavigationCache","state","getState","navigation","setOptions","router","emitter","stackRef","useContext","cache","useMemo","current","actions","actionCreators","routes","reduce","acc","route","previous","key","emit","rest","dispatch","thunk","action","source","withStack","callback","isStackSet","process","env","NODE_ENV","Error","stack","undefined","helpers","keys","name","args","create","options","o","isFocused","index"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport type { NavigationHelpers, NavigationProp } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<\n  State extends NavigationState,\n  EventMap extends Record<string, any>\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n> = Record<\n  string,\n  NavigationProp<ParamListBase, string, State, ScreenOptions, EventMap>\n>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, EventMap>) {\n  const { stackRef } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    type Thunk =\n      | NavigationAction\n      | ((state: State) => NavigationAction | null | undefined);\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { emit, ...rest } = navigation;\n\n      const dispatch = (thunk: Thunk) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const withStack = (callback: () => void) => {\n        let isStackSet = false;\n\n        try {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            stackRef &&\n            !stackRef.current\n          ) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          acc[name] = (...args: any) =>\n            withStack(() =>\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\n              dispatch(actions[name](...args))\n            );\n\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\n        setOptions: (options: object) =>\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"module"}